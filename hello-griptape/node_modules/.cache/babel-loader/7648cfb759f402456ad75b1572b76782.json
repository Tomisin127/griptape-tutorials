{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildMessage = exports.executeMultiMessage = exports.instantiateContract = exports.refContract = exports.extendContract = exports.createContract = exports.ContractTxResponseHandler = void 0;\n\nvar secretjs_1 = require(\"secretjs\");\n\nvar bootstrap_1 = require(\"../bootstrap\");\n\nvar bootstrap_2 = require(\"../bootstrap\");\n\nvar errors_1 = require(\"./errors\");\n\nvar utils_1 = require(\"./utils\");\n\nvar decoder = new TextDecoder('utf-8');\nvar QUERY_TYPE = 'query';\nvar MESSAGE_TYPE = 'message';\nvar contractRegistry = [];\n\nvar ContractTxResponseHandler = function () {\n  function ContractTxResponseHandler(response) {\n    this.response = response;\n  }\n\n  ContractTxResponseHandler.prototype.parse = function () {\n    return JSON.parse(decoder.decode(this.response.data));\n  };\n\n  ContractTxResponseHandler.prototype.getRaw = function () {\n    return this.response;\n  };\n\n  ContractTxResponseHandler.prototype.isEmpty = function () {\n    return typeof this.response === 'undefined';\n  };\n\n  ContractTxResponseHandler.of = function (response) {\n    return new ContractTxResponseHandler(response);\n  };\n\n  return ContractTxResponseHandler;\n}();\n\nexports.ContractTxResponseHandler = ContractTxResponseHandler;\n\nfunction getContext(contractAddress) {\n  return __awaiter(this, void 0, void 0, function () {\n    var address, key, height, padding, entropy, permit, rawPermit;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          address = bootstrap_1.getAddress();\n          key = bootstrap_2.viewingKeyManager.get(contractAddress);\n          return [4, bootstrap_1.getHeight()];\n\n        case 1:\n          height = _a.sent();\n          padding = utils_1.getEntropyString(32);\n          entropy = window.btoa(utils_1.getEntropyString(32));\n          rawPermit = localStorage.getItem(\"query_permit_\" + (address + contractAddress));\n\n          if (rawPermit) {\n            permit = JSON.parse(rawPermit);\n          }\n\n          return [2, {\n            address: address,\n            key: key,\n            height: height,\n            padding: padding,\n            entropy: entropy,\n            permit: permit\n          }];\n      }\n    });\n  });\n}\n\nfunction handleResponse(txHash) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result, tx, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          result = false;\n          _a.label = 1;\n\n        case 1:\n          if (!true) return [3, 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 5]);\n\n          return [4, bootstrap_1.getSigningClient().restClient.txById(txHash)];\n\n        case 3:\n          tx = _a.sent();\n\n          if (!tx.raw_log.startsWith('[')) {\n            result = false;\n          } else {\n            result = true;\n          }\n\n          return [3, 7];\n\n        case 4:\n          error_1 = _a.sent();\n          return [3, 5];\n\n        case 5:\n          return [4, utils_1.sleep(6000)];\n\n        case 6:\n          _a.sent();\n\n          return [3, 1];\n\n        case 7:\n          return [2, {\n            found: result,\n            response: tx\n          }];\n      }\n    });\n  });\n}\n\nfunction createContract(contract) {\n  var codeHash = contract.codeHash;\n  var handler = {\n    get: function get(contract, prop) {\n      var _this = this;\n\n      if (typeof contract[prop] !== 'function') {\n        return Reflect.get(contract, prop);\n      }\n\n      return new Proxy(contract[prop], {\n        get: function get(func, prop) {\n          if (prop === 'target') {\n            return func;\n          }\n\n          return Reflect.get(func, prop);\n        },\n        apply: function apply(func, thisArg, argumentsList) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var contractAddress, ctx, args, result, _, _a, handleMsg, memo, rawTransferAmount, fees, calculatedFee, transferAmount, response, config, result_1, txResponse, e_1, errorHandler;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  contractAddress = contract.at;\n                  return [4, getContext(contractAddress)];\n\n                case 1:\n                  ctx = _b.sent();\n                  args = __spreadArray([ctx], argumentsList);\n                  result = Reflect.apply(func, thisArg, args);\n                  if (!(func.type === QUERY_TYPE)) return [3, 2];\n                  _ = undefined;\n                  return [2, bootstrap_1.queryContract(contractAddress, result, _, codeHash)];\n\n                case 2:\n                  if (!(func.type === MESSAGE_TYPE)) return [3, 9];\n                  _a = result, handleMsg = _a.handleMsg, memo = _a.memo, rawTransferAmount = _a.transferAmount, fees = _a.fees;\n                  calculatedFee = utils_1.getFeeForExecute(fees);\n                  transferAmount = rawTransferAmount ? [rawTransferAmount] : [];\n                  _b.label = 3;\n\n                case 3:\n                  _b.trys.push([3, 8,, 9]);\n\n                  return [4, bootstrap_1.executeContract(contractAddress, handleMsg, memo, transferAmount, calculatedFee, codeHash)];\n\n                case 4:\n                  response = _b.sent();\n                  config = bootstrap_1.getConfig();\n                  if (!config) throw new Error('No config available');\n                  if (!(config.broadcastMode == secretjs_1.BroadcastMode.Sync)) return [3, 6];\n                  return [4, handleResponse(response.transactionHash)];\n\n                case 5:\n                  result_1 = _b.sent();\n\n                  if (result_1.found && result_1.response) {\n                    txResponse = result_1.response;\n                    return [2, ContractTxResponseHandler.of(txResponse)];\n                  } else {\n                    throw new Error(\"Could not found TX: \" + response.transactionHash);\n                  }\n\n                  return [3, 7];\n\n                case 6:\n                  return [2, ContractTxResponseHandler.of(response)];\n\n                case 7:\n                  return [3, 9];\n\n                case 8:\n                  e_1 = _b.sent();\n                  errorHandler = errors_1.getErrorHandler(contract.id, e_1);\n\n                  if (errorHandler) {\n                    errorHandler.handler();\n                  } else {\n                    throw e_1;\n                  }\n\n                  return [3, 9];\n\n                case 9:\n                  return [2, Reflect.apply(func, thisArg, argumentsList)];\n              }\n            });\n          });\n        }\n      });\n    }\n  };\n  var id = contract.id,\n      at = contract.at,\n      _a = contract.definition,\n      q = _a.queries,\n      m = _a.messages;\n  var queries = q || {};\n  var messages = m || {};\n  Object.keys(queries).forEach(function (it) {\n    return queries[it].type = QUERY_TYPE;\n  });\n  Object.keys(messages).forEach(function (it) {\n    return messages[it].type = MESSAGE_TYPE;\n  });\n\n  var target = __assign(__assign({\n    id: id,\n    at: at\n  }, queries), messages);\n\n  var result = new Proxy(target, handler);\n  var idx = contractRegistry.findIndex(function (it) {\n    return it.id === contract.id;\n  });\n\n  if (idx === -1) {\n    contractRegistry.push(result);\n  }\n\n  return result;\n}\n\nexports.createContract = createContract;\n\nfunction extendContract(base, extended) {\n  var _a = base.messages,\n      baseMessages = _a === void 0 ? {} : _a,\n      _b = base.queries,\n      baseQueries = _b === void 0 ? {} : _b;\n  var _c = extended.messages,\n      defMessages = _c === void 0 ? {} : _c,\n      _d = extended.queries,\n      defQueries = _d === void 0 ? {} : _d;\n  var baseMessagesKeys = Object.keys(baseMessages);\n  var defMessagesKeys = Object.keys(defMessages);\n  var messageKeys = utils_1.calculateCommonKeys(baseMessagesKeys, defMessagesKeys);\n  var baseQueriesKeys = Object.keys(baseQueries);\n  var defQueriesKeys = Object.keys(defQueries);\n  var queriesKey = utils_1.calculateCommonKeys(baseQueriesKeys, defQueriesKeys);\n  var result = {\n    messages: __assign(__assign({}, base.messages), extended.messages),\n    queries: __assign(__assign({}, base.queries), extended.queries)\n  };\n  messageKeys.forEach(function (key) {\n    result.messages[key] = defMessages[key];\n  });\n  queriesKey.forEach(function (key) {\n    result.queries[key] = defQueries[key];\n  });\n  return result;\n}\n\nexports.extendContract = extendContract;\n\nfunction refContract(idOrAddress) {\n  var contract = contractRegistry.find(function (it) {\n    return it.id === idOrAddress || it.at === idOrAddress;\n  });\n  if (!contract) throw new Error(\"No contract found with id or address \" + idOrAddress);\n  return contract;\n}\n\nexports.refContract = refContract;\n\nfunction instantiateContract(req) {\n  return __awaiter(this, void 0, void 0, function () {\n    var id, definition, codeId, label, initMsg, at, spec;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          id = req.id, definition = req.definition, codeId = req.codeId, label = req.label, initMsg = req.initMsg;\n          return [4, bootstrap_1.instantiate(codeId, initMsg, label)];\n\n        case 1:\n          at = _a.sent().contractAddress;\n          spec = {\n            id: id,\n            at: at,\n            definition: definition\n          };\n          return [2, createContract(spec)];\n      }\n    });\n  });\n}\n\nexports.instantiateContract = instantiateContract;\n\nfunction executeMultiMessage(infos, memo) {\n  return __awaiter(this, void 0, void 0, function () {\n    var messages, fees, _i, infos_1, info, contractAddress, ctx, message, transferAmount, entry, response;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          messages = [];\n          fees = 0;\n          _i = 0, infos_1 = infos;\n          _a.label = 1;\n\n        case 1:\n          if (!(_i < infos_1.length)) return [3, 4];\n          info = infos_1[_i];\n          contractAddress = info.contract.at;\n          return [4, getContext(contractAddress)];\n\n        case 2:\n          ctx = _a.sent();\n          message = info.getMessage.apply(info, __spreadArray([ctx], info.args));\n          transferAmount = message.transferAmount ? [message.transferAmount] : [];\n          entry = {\n            contractAddress: contractAddress,\n            handleMsg: message.handleMsg,\n            transferAmount: transferAmount\n          };\n          messages.push(entry);\n          fees += message.fees ? message.fees : 0;\n          _a.label = 3;\n\n        case 3:\n          _i++;\n          return [3, 1];\n\n        case 4:\n          return [4, bootstrap_1.getSigningClient().multiExecute(messages, memo, utils_1.getFeeForExecute(fees))];\n\n        case 5:\n          response = _a.sent();\n          return [2, ContractTxResponseHandler.of(response)];\n      }\n    });\n  });\n}\n\nexports.executeMultiMessage = executeMultiMessage;\n\nfunction buildMessage(contract, message) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  var getMessage = message.target;\n  return {\n    getMessage: getMessage,\n    contract: contract,\n    args: args\n  };\n}\n\nexports.buildMessage = buildMessage;","map":null,"metadata":{},"sourceType":"script"}