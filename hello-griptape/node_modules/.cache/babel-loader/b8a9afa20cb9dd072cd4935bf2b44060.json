{"ast":null,"code":"!function (globals) {\n  'use strict'; //*** UMD BEGIN\n\n  if (typeof define !== 'undefined' && define.amd) {\n    //require.js / AMD\n    define([], function () {\n      return secureRandom;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    module.exports = secureRandom;\n  } else {\n    //script / browser\n    globals.secureRandom = secureRandom;\n  } //*** UMD END\n  //options.type is the only valid option\n\n\n  function secureRandom(count, options) {\n    options = options || {\n      type: 'Array'\n    }; //we check for process.pid to prevent browserify from tricking us\n\n    if (typeof process != 'undefined' && typeof process.pid == 'number' && process.versions && process.versions.node) {\n      return nodeRandom(count, options);\n    } else {\n      var crypto = window.crypto || window.msCrypto;\n      if (!crypto) throw new Error(\"Your browser does not support window.crypto.\");\n      return browserRandom(count, options);\n    }\n  }\n\n  function nodeRandom(count, options) {\n    var crypto = require('crypto');\n\n    var buf = crypto.randomBytes(count);\n\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(buf);\n\n      case 'Buffer':\n        return buf;\n\n      case 'Uint8Array':\n        var arr = new Uint8Array(count);\n\n        for (var i = 0; i < count; ++i) {\n          arr[i] = buf.readUInt8(i);\n        }\n\n        return arr;\n\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n\n  function browserRandom(count, options) {\n    var nativeArr = new Uint8Array(count);\n    var crypto = window.crypto || window.msCrypto;\n    crypto.getRandomValues(nativeArr);\n\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(nativeArr);\n\n      case 'Buffer':\n        try {\n          var b = new Buffer(1);\n        } catch (e) {\n          throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');\n        }\n\n        return new Buffer(nativeArr);\n\n      case 'Uint8Array':\n        return nativeArr;\n\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n\n  secureRandom.randomArray = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Array'\n    });\n  };\n\n  secureRandom.randomUint8Array = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Uint8Array'\n    });\n  };\n\n  secureRandom.randomBuffer = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Buffer'\n    });\n  };\n}(this);","map":null,"metadata":{},"sourceType":"script"}