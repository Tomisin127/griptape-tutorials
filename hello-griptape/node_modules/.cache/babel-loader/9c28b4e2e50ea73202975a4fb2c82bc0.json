{"ast":null,"code":"\"use strict\";\n/**\n * hmac.js\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar params_1 = __importDefault(require(\"./params\"));\n\nvar util = __importStar(require(\"js-crypto-env\"));\n\nvar js_crypto_hash_1 = __importDefault(require(\"js-crypto-hash\"));\n/**\n * Compute keyed hash value\n * @param {Uint8Array} key - ByteArray of symmetric key.\n * @param {Uint8Array} data - Byte array of message to be hashed.\n * @param {HashTypes} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.\n * @return {Promise<Uint8Array>} - Keyed-hash value.\n * @throws {Error} - Throws if UnsupportedEnvironment, i.e., even neither WebCrypto, NodeCrypto nor PureJS is available.\n */\n\n\nexports.compute = function (key, data, hash) {\n  if (hash === void 0) {\n    hash = 'SHA-256';\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var env, msgKeyedHash, errMsg, native, keyObj, keyObj, f, e_1, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          env = util.getCrypto();\n          native = true;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 9,, 10]);\n\n          if (!(env.name === 'webCrypto' && typeof env.crypto.importKey === 'function' && typeof env.crypto.sign === 'function')) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , env.crypto.importKey('raw', key, {\n            name: 'HMAC',\n            hash: {\n              name: hash\n            }\n          }, false, ['sign', 'verify'])];\n\n        case 2:\n          keyObj = _a.sent();\n          return [4\n          /*yield*/\n          , env.crypto.sign({\n            name: 'HMAC',\n            hash: {\n              name: hash\n            }\n          }, keyObj, data)];\n\n        case 3:\n          msgKeyedHash = _a.sent();\n          return [3\n          /*break*/\n          , 8];\n\n        case 4:\n          if (!(env.name === 'msCrypto')) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , msImportKey('raw', key, {\n            name: 'HMAC',\n            hash: {\n              name: hash\n            }\n          }, false, ['sign', 'verify'], env.crypto)];\n\n        case 5:\n          keyObj = _a.sent();\n          return [4\n          /*yield*/\n          , msHmac(hash, keyObj, data, env.crypto)];\n\n        case 6:\n          msgKeyedHash = _a.sent();\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          if (env.name === 'nodeCrypto') {\n            // for node\n            f = env.crypto.createHmac(params_1.default.hashes[hash].nodeName, key);\n            msgKeyedHash = f.update(data).digest();\n          } else native = false;\n\n          _a.label = 8;\n\n        case 8:\n          return [3\n          /*break*/\n          , 10];\n\n        case 9:\n          e_1 = _a.sent();\n          errMsg = e_1.message;\n          native = false;\n          return [3\n          /*break*/\n          , 10];\n\n        case 10:\n          if (!!native) return [3\n          /*break*/\n          , 14];\n          _a.label = 11;\n\n        case 11:\n          _a.trys.push([11, 13,, 14]);\n\n          return [4\n          /*yield*/\n          , purejs(key, data, hash)];\n\n        case 12:\n          msgKeyedHash = _a.sent();\n          return [3\n          /*break*/\n          , 14];\n\n        case 13:\n          e_2 = _a.sent();\n          errMsg = errMsg + \" => \" + e_2.message;\n          throw new Error(\"UnsupportedEnvironments: \" + errMsg);\n\n        case 14:\n          return [2\n          /*return*/\n          , new Uint8Array(msgKeyedHash)];\n      }\n    });\n  });\n};\n/**\n * PureJS implementation of HMAC algorithm specified in RFC 2104 {@link https://tools.ietf.org/html/rfc2104}.\n * @param {Uint8Array} key - ByteArray of symmetric key.\n * @param {Uint8Array} data - Byte array of message to be hashed.\n * @param {HashTypes} hash - Name of hash algorithm like 'SHA-256'.\n * @return {Promise<Uint8Array>} - Keyed-hash value.\n */\n\n\nvar purejs = function purejs(key, data, hash) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var B, L, K, KxorIpad, KxorOpad, inner, hashedInner, outer;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          B = params_1.default.hashes[hash].blockSize;\n          L = params_1.default.hashes[hash].hashSize;\n          if (!(key.length > B)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , js_crypto_hash_1.default.compute(key, hash)];\n\n        case 1:\n          key = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          K = new Uint8Array(B);\n          K.set(key);\n          KxorIpad = K.map(function (k) {\n            return 0xFF & (0x36 ^ k);\n          });\n          KxorOpad = K.map(function (k) {\n            return 0xFF & (0x5c ^ k);\n          });\n          inner = new Uint8Array(B + data.length);\n          inner.set(KxorIpad);\n          inner.set(data, B);\n          return [4\n          /*yield*/\n          , js_crypto_hash_1.default.compute(inner, hash)];\n\n        case 3:\n          hashedInner = _a.sent();\n          outer = new Uint8Array(B + L);\n          outer.set(KxorOpad);\n          outer.set(hashedInner, B);\n          return [2\n          /*return*/\n          , js_crypto_hash_1.default.compute(outer, hash)];\n      }\n    });\n  });\n};\n/**\n * Verify keyed-hash value using the key\n * @param {Uint8Array} key - ByteArray of symmetric key.\n * @param {Uint8Array} data - Byte array of message to be hashed.\n * @param {Uint8Array} mac - Given keyed-hash value.\n * @param {HashTypes} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.\n * @return {Promise<boolean>} - Result of verification.\n * @throws {Error} - Throws if InvalidInputMac\n */\n\n\nexports.verify = function (key, data, mac, hash) {\n  if (hash === void 0) {\n    hash = 'SHA-256';\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var newMac;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , exports.compute(key, data, hash)];\n\n        case 1:\n          newMac = _a.sent();\n          return [2\n          /*return*/\n          , mac.toString() === newMac.toString()];\n      }\n    });\n  });\n}; // function definitions for damn ms ie\n\n\nvar msImportKey = function msImportKey(type, key, alg, ext, use, webCrypto) {\n  return new Promise(function (resolve, reject) {\n    var op = webCrypto.importKey(type, key, alg, ext, use);\n\n    op.oncomplete = function (evt) {\n      resolve(evt.target.result);\n    };\n\n    op.onerror = function () {\n      reject('KeyImportingFailed');\n    };\n  });\n};\n\nvar msHmac = function msHmac(hash, k, d, webCrypto) {\n  return new Promise(function (resolve, reject) {\n    var op = webCrypto.sign({\n      name: 'HMAC',\n      hash: {\n        name: hash\n      }\n    }, k, d);\n\n    op.oncomplete = function (evt) {\n      resolve(new Uint8Array(evt.target.result));\n    };\n\n    op.onerror = function () {\n      reject('ComputingHMACFailed');\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}