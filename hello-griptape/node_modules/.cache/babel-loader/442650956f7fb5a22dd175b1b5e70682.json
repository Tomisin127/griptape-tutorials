{"ast":null,"code":"\"use strict\";\n/**\n * random.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = __importStar(require(\"js-crypto-env\"));\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of uppercase or lowercase alphanumeric characters;\n * @param {Number} len - Length of string.\n * @return {String} - Generated random ASCII string.\n */\n\n\nexports.getRandomString = function (len) {\n  var array = exports.getRandomBytes(len);\n  var types = exports.getRandomBytes(len); // indicating alphanumeric, upper, lower\n\n  var finalString = ''; // Ascii code\n  // 1-0: 0x30 -- 0x39, 10 chars\n  // A-Z: 0x41 -- 0x5a,\n  // a-z: 0x61 -- 0x7a\n\n  for (var i = 0; i < len; i++) {\n    types[i] = types[i] % 3;\n    array[i] = types[i] === 0 ? array[i] % 10 + 0x30 : array[i] % 26 + (types[i] === 1 ? 0x41 : 0x61);\n    finalString += String.fromCharCode(array[i]);\n  }\n\n  return finalString;\n};\n/**\n * Secure random 'ASCII' string generator based on getRandomBytes;\n * @param {Number} len - Length of ASCII string.\n * @return {String} - Generated random ASCII string.\n */\n\n\nexports.getRandomAsciiString = function (len) {\n  var array = exports.getRandomBytes(len);\n  var finalString = ''; // Ascii code excluding control characters are in 0x20 -- 0x7e\n\n  for (var i = 0; i < len; i++) {\n    array[i] = array[i] % 0x5e + 0x20;\n    finalString += String.fromCharCode(array[i]);\n  }\n\n  return finalString;\n};\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of givin character candidates;\n * @param {Number} len - Length of string.\n * @param {String} candidates - Candidates string to sample randomly.\n * @return {String} - Generated random string.\n */\n\n\nexports.getRandomSampledString = function (len, candidates) {\n  var candidateLen = candidates.length;\n  if (candidateLen === 0) return '';\n  var array = exports.getRandomBytes(len);\n  var finalString = '';\n\n  for (var i = 0; i < len; i++) {\n    finalString += candidates[array[i] % candidateLen];\n  }\n\n  return finalString;\n};\n/**\n * Secure random generator that returns a byte array filled with cryptographically secure random bytes\n * @param {Number} len - Byte length of random sequence.\n * @return {Uint8Array} - Generated random sequence.\n * @throws {Error} - Throws if UnsupportedEnvironment.\n */\n\n\nexports.getRandomBytes = function (len) {\n  var webCrypto = util.getRootWebCryptoAll(); // web crypto api or ms crypto\n\n  var nodeCrypto = util.getNodeCrypto(); // implementation on node.js\n\n  if (typeof webCrypto !== 'undefined' && typeof webCrypto.getRandomValues === 'function') {\n    var array = new Uint8Array(len);\n    webCrypto.getRandomValues(array); // for modern browsers or legacy ie 11\n\n    return array;\n  } else if (typeof nodeCrypto !== 'undefined') {\n    // for node\n    return new Uint8Array(nodeCrypto.randomBytes(len));\n  } else {\n    throw new Error('UnsupportedEnvironment');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}