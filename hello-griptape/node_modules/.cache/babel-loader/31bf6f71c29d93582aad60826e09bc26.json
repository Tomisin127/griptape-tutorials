{"ast":null,"code":"\"use strict\"; // Copyright (C) 2017 Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar block_1 = require(\"../../internals/block\");\n/**\n * WebCrypto-based implementation of the AES block cipher.\n *\n * This implementation (ab)uses AES-CBC mode to implement AES-ECB. This is\n * likely to be rather slow, as it requires an async call per block, and\n * discards half the buffer.\n *\n * In theory it should be constant time due to the use of WebCrypto (provided\n * the browser's implementation is constant time), but it could probably benefit\n * from some clever optimization work, or improvements to the WebCrypto API.\n *\n * Some WebCrypto implementations (e.g. node-webcrypto-ossl) support ECB mode\n * natively, so we could take advantage of that to potentially encrypt multiple\n * blocks in a single invocation.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\n\n\nvar WebCryptoAes = /*#__PURE__*/function () {\n  function WebCryptoAes(_crypto, _key) {\n    _classCallCheck(this, WebCryptoAes);\n\n    this._crypto = _crypto;\n    this._key = _key; // An initialization vector of all zeros, exposing the raw AES function\n\n    this._iv = new block_1.default();\n    this._emptyPromise = Promise.resolve(this);\n  }\n  /**\n   * Create a new WebCryptoAes instance\n   *\n   * @param {Crypto} crypto - the Web Cryptography provider\n   * @param {Uint8Array} keyData - the AES secret key\n   * @returns {Promise<WebCryptoAes}\n   */\n\n\n  _createClass(WebCryptoAes, [{\n    key: \"clear\",\n\n    /**\n     * Cleans expanded keys from memory, setting them to zeros.\n     */\n    value: function clear() {\n      // TODO: perhaps we should clear something, but what, and how?\n      return this;\n    }\n    /**\n     * Encrypt a single AES block. While ordinarily this might let us see penguins, we're using it safely\n     *\n     * @param {Block} block - block to be encrypted in-place\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: \"encryptBlock\",\n    value: function encryptBlock(block) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var params, ctBlock;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                params = {\n                  name: \"AES-CBC\",\n                  iv: this._iv.data\n                };\n                _context.next = 3;\n                return this._crypto.subtle.encrypt(params, this._key, block.data);\n\n              case 3:\n                ctBlock = _context.sent;\n                // TODO: a more efficient way to do in-place encryption?\n                block.data.set(new Uint8Array(ctBlock, 0, block_1.default.SIZE));\n                return _context.abrupt(\"return\", this._emptyPromise);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }], [{\n    key: \"importKey\",\n    value: function importKey(crypto, keyData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(keyData.length !== 16 && keyData.length !== 32)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Miscreant: invalid key length: \".concat(keyData.length, \" (expected 16 or 32 bytes)\"));\n\n              case 2:\n                _context2.next = 4;\n                return crypto.subtle.importKey(\"raw\", keyData, \"AES-CBC\", false, [\"encrypt\"]);\n\n              case 4:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new WebCryptoAes(crypto, key));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return WebCryptoAes;\n}();\n\nexports.default = WebCryptoAes;","map":null,"metadata":{},"sourceType":"script"}