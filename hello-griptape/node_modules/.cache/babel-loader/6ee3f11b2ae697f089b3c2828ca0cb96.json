{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar bip39 = __importStar(require(\"bip39\"));\n\nvar pbkdf2_1 = require(\"pbkdf2\");\n\nvar unorm = __importStar(require(\"unorm\"));\n\nvar englishmnemonic_1 = require(\"./englishmnemonic\");\n\nvar Bip39 = /*#__PURE__*/function () {\n  function Bip39() {\n    _classCallCheck(this, Bip39);\n  }\n\n  _createClass(Bip39, null, [{\n    key: \"encode\",\n    value: function encode(entropy) {\n      var allowedEntropyLengths = [16, 20, 24, 28, 32];\n\n      if (allowedEntropyLengths.indexOf(entropy.length) === -1) {\n        throw new Error(\"invalid input length\");\n      }\n\n      return new englishmnemonic_1.EnglishMnemonic(bip39.entropyToMnemonic(encoding_1.Encoding.toHex(entropy)));\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(mnemonic) {\n      return encoding_1.Encoding.fromHex(bip39.mnemonicToEntropy(mnemonic.toString()));\n    }\n  }, {\n    key: \"mnemonicToSeed\",\n    value: function () {\n      var _mnemonicToSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mnemonic, password) {\n        var mnemonicBytes, salt, saltBytes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // reimplementation of bip39.mnemonicToSeed using the asynchronous\n                // interface of https://www.npmjs.com/package/pbkdf2\n                mnemonicBytes = Buffer.from(unorm.nfkd(mnemonic.toString()), \"utf8\");\n                salt = \"mnemonic\" + (password ? unorm.nfkd(password) : \"\");\n                saltBytes = Buffer.from(salt, \"utf8\");\n                return _context.abrupt(\"return\", this.pbkdf2(mnemonicBytes, saltBytes, 2048, 64, \"sha512\"));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function mnemonicToSeed(_x, _x2) {\n        return _mnemonicToSeed.apply(this, arguments);\n      }\n\n      return mnemonicToSeed;\n    }() // convert pbkdf2's calllback interface to Promise interface\n\n  }, {\n    key: \"pbkdf2\",\n    value: function () {\n      var _pbkdf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(secret, salt, iterations, keylen, digest) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  pbkdf2_1.pbkdf2(secret, salt, iterations, keylen, digest, function (err, derivedKey) {\n                    if (err) {\n                      reject(err);\n                    } else {\n                      resolve(new Uint8Array(derivedKey));\n                    }\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function pbkdf2(_x3, _x4, _x5, _x6, _x7) {\n        return _pbkdf.apply(this, arguments);\n      }\n\n      return pbkdf2;\n    }()\n  }]);\n\n  return Bip39;\n}();\n\nexports.Bip39 = Bip39;","map":null,"metadata":{},"sourceType":"script"}