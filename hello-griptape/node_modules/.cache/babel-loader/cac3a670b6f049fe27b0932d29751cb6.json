{"ast":null,"code":"\"use strict\";\n/**\n * encoder.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar env = __importStar(require(\"./env\"));\n/**\n * Encode ArrayBuffer or TypedArray To Base64\n * @param data\n * @return {*}\n */\n\n\nexports.encodeBase64 = function (data) {\n  var str = '';\n  if (typeof data === 'string') str = data;else str = exports.arrayBufferToString(data);\n  var btoa = env.getEnvBtoa();\n  return btoa(str);\n};\n/**\n * Decode Base64 to Uint8Array\n * @param str\n * @return {Uint8Array|string|*}\n */\n\n\nexports.decodeBase64 = function (str) {\n  var atob = env.getEnvAtob();\n  var binary = atob(str);\n  var data = exports.stringToArrayBuffer(binary);\n  return getAsciiIfAscii(data);\n};\n/**\n * if input data is an ArrayBuffer or TypedArray, it would be returned as Uint8Array\n * @param data\n * @return {Uint8Array}\n */\n\n\nvar sanitizeTypedArrayAndArrayBuffer = function sanitizeTypedArrayAndArrayBuffer(data) {\n  if (data instanceof Uint8Array) return data;\n\n  if (ArrayBuffer.isView(data) && typeof data.buffer !== 'undefined') {\n    // TypedArray except Uint8Array\n    return new Uint8Array(data.buffer);\n  } else return new Uint8Array(data); // ArrayBuffer\n\n};\n/**\n * Check if the given Uint8Array can be expressed in Ascii Text\n * @param data\n * @return {Uint8Array|string|*}\n */\n\n\nvar getAsciiIfAscii = function getAsciiIfAscii(data) {\n  var flag = true;\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i] > 0x7e || data[i] < 0x20 && data[i] !== 0x0d && data[i] !== 0x0a) {\n      flag = false;\n      break;\n    }\n  }\n\n  var returnData = null;\n\n  if (flag) {\n    returnData = '';\n\n    for (var i = 0; i < data.length; i++) {\n      returnData += String.fromCharCode(data[i]);\n    }\n  } else returnData = data;\n\n  return returnData;\n};\n/**\n * Encode ArrayBuffer or TypedArray to base64url string\n * @param data\n * @return {string}\n */\n\n\nexports.encodeBase64Url = function (data) {\n  return exports.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n};\n/**\n * Decode Base64Url string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.decodeBase64Url = function (str) {\n  str = str.replace(/-/g, '+').replace(/_/g, '/'); // str = str + \"=\".repeat(str.length % 4); // this sometimes causes error...\n\n  return exports.decodeBase64(str);\n};\n/**\n * Encode ArrayBuffer or TypedArray to hex string\n * @param data\n * @return {string}\n */\n\n\nexports.arrayBufferToHexString = function (data) {\n  var arr = sanitizeTypedArrayAndArrayBuffer(data);\n  var hexStr = '';\n\n  for (var i = 0; i < arr.length; i++) {\n    var hex = (arr[i] & 0xff).toString(16);\n    hex = hex.length === 1 ? \"0\" + hex : hex;\n    hexStr += hex;\n  }\n\n  return hexStr;\n};\n/**\n * Decode hex string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.hexStringToArrayBuffer = function (str) {\n  var arr = [];\n  var len = str.length;\n\n  for (var i = 0; i < len; i += 2) {\n    arr.push(parseInt(str.substr(i, 2), 16));\n  }\n\n  return new Uint8Array(arr);\n};\n/**\n * Encode ArrayBuffer or TypedArray to string with code (like output of legacy atob)\n * @param data\n * @return {string}\n */\n\n\nexports.arrayBufferToString = function (data) {\n  var bytes = sanitizeTypedArrayAndArrayBuffer(data);\n  var arr = new Array(bytes.length);\n  bytes.forEach(function (x, i) {\n    arr[i] = x;\n  });\n  return String.fromCharCode.apply(null, arr);\n};\n/**\n * Decode string with code (like output of legacy atob) to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.stringToArrayBuffer = function (str) {\n  var bytes = new Uint8Array(str.length);\n  return bytes.map(function (_x, i) {\n    return str.charCodeAt(i);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}