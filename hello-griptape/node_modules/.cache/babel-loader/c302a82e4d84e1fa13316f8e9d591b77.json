{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wipe_1 = require(\"../../internals/wipe\"); // Powers of x mod poly in GF(2).\n\n\nvar POWX = new Uint8Array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f]); // FIPS-197 Figure 7. S-box substitution values in hexadecimal format.\n\nvar SBOX0 = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]); // FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.\n\nvar SBOX1 = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]); // Encryption and decryption tables.\n// Will be computed by initialize() when the first AES instance is created.\n\nvar isInitialized = false;\nvar Te0;\nvar Te1;\nvar Te2;\nvar Te3;\nvar Td0;\nvar Td1;\nvar Td2;\nvar Td3;\n/**\n * Polyfill for the AES block cipher.\n *\n * This implementation uses lookup tables, so it's susceptible to cache-timing\n * side-channel attacks. A constant-time version we tried was super slow (a few\n * kilobytes per second), so we'll have to live with it.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\n\nvar PolyfillAes = /*#__PURE__*/function () {\n  /**\n   * Constructs AES with the given 16 or 32-byte key\n   * for AES-128 or AES-256.\n   */\n  function PolyfillAes(keyData) {\n    _classCallCheck(this, PolyfillAes);\n\n    if (!isInitialized) {\n      initialize();\n    } // Only AES-128 and AES-256 supported. AES-192 is not.\n\n\n    if (keyData.length !== 16 && keyData.length !== 32) {\n      throw new Error(\"Miscreant: invalid key length: \".concat(keyData.length, \" (expected 16 or 32 bytes)\"));\n    }\n\n    this._encKey = expandKey(keyData);\n    this._emptyPromise = Promise.resolve(this);\n  }\n  /**\n   * Cleans expanded keys from memory, setting them to zeros.\n   */\n\n\n  _createClass(PolyfillAes, [{\n    key: \"clear\",\n    value: function clear() {\n      if (this._encKey) {\n        wipe_1.wipe(this._encKey);\n      }\n\n      return this;\n    }\n    /**\n     * Encrypt 16-byte block in-place, replacing its contents with ciphertext.\n     *\n     * This function should not be used to encrypt data without any\n     * cipher mode! It should only be used to implement a cipher mode.\n     * This library uses it to implement AES-SIV.\n     */\n\n  }, {\n    key: \"encryptBlock\",\n    value: function encryptBlock(block) {\n      var src = block.data;\n      var dst = block.data;\n      var s0 = readUint32BE(src, 0);\n      var s1 = readUint32BE(src, 4);\n      var s2 = readUint32BE(src, 8);\n      var s3 = readUint32BE(src, 12); // First round just XORs input with key.\n\n      s0 ^= this._encKey[0];\n      s1 ^= this._encKey[1];\n      s2 ^= this._encKey[2];\n      s3 ^= this._encKey[3];\n      var t0 = 0;\n      var t1 = 0;\n      var t2 = 0;\n      var t3 = 0; // Middle rounds shuffle using tables.\n      // Number of rounds is set by length of expanded key.\n\n      var nr = this._encKey.length / 4 - 2; // - 2: one above, one more below\n\n      var k = 4;\n\n      for (var r = 0; r < nr; r++) {\n        t0 = this._encKey[k + 0] ^ Te0[s0 >>> 24 & 0xff] ^ Te1[s1 >>> 16 & 0xff] ^ Te2[s2 >>> 8 & 0xff] ^ Te3[s3 & 0xff];\n        t1 = this._encKey[k + 1] ^ Te0[s1 >>> 24 & 0xff] ^ Te1[s2 >>> 16 & 0xff] ^ Te2[s3 >>> 8 & 0xff] ^ Te3[s0 & 0xff];\n        t2 = this._encKey[k + 2] ^ Te0[s2 >>> 24 & 0xff] ^ Te1[s3 >>> 16 & 0xff] ^ Te2[s0 >>> 8 & 0xff] ^ Te3[s1 & 0xff];\n        t3 = this._encKey[k + 3] ^ Te0[s3 >>> 24 & 0xff] ^ Te1[s0 >>> 16 & 0xff] ^ Te2[s1 >>> 8 & 0xff] ^ Te3[s2 & 0xff];\n        k += 4;\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      } // Last round uses s-box directly and XORs to produce output.\n\n\n      s0 = SBOX0[t0 >>> 24] << 24 | SBOX0[t1 >>> 16 & 0xff] << 16 | SBOX0[t2 >>> 8 & 0xff] << 8 | SBOX0[t3 & 0xff];\n      s1 = SBOX0[t1 >>> 24] << 24 | SBOX0[t2 >>> 16 & 0xff] << 16 | SBOX0[t3 >>> 8 & 0xff] << 8 | SBOX0[t0 & 0xff];\n      s2 = SBOX0[t2 >>> 24] << 24 | SBOX0[t3 >>> 16 & 0xff] << 16 | SBOX0[t0 >>> 8 & 0xff] << 8 | SBOX0[t1 & 0xff];\n      s3 = SBOX0[t3 >>> 24] << 24 | SBOX0[t0 >>> 16 & 0xff] << 16 | SBOX0[t1 >>> 8 & 0xff] << 8 | SBOX0[t2 & 0xff];\n      s0 ^= this._encKey[k + 0];\n      s1 ^= this._encKey[k + 1];\n      s2 ^= this._encKey[k + 2];\n      s3 ^= this._encKey[k + 3];\n      writeUint32BE(s0, dst, 0);\n      writeUint32BE(s1, dst, 4);\n      writeUint32BE(s2, dst, 8);\n      writeUint32BE(s3, dst, 12);\n      return this._emptyPromise;\n    }\n  }]);\n\n  return PolyfillAes;\n}();\n\nexports.default = PolyfillAes; // Initialize generates encryption and decryption tables.\n\nfunction initialize() {\n  var poly = 1 << 8 | 1 << 4 | 1 << 3 | 1 << 1 | 1 << 0;\n\n  function mul(b, c) {\n    var i = b;\n    var j = c;\n    var s = 0;\n\n    for (var k = 1; k < 0x100 && j !== 0; k <<= 1) {\n      // Invariant: k == 1<<n, i == b * x^n\n      if ((j & k) !== 0) {\n        // s += i in GF(2); xor in binary\n        s ^= i;\n        j ^= k; // turn off bit to end loop early\n      } // i *= x in GF(2) modulo the polynomial\n\n\n      i <<= 1;\n\n      if ((i & 0x100) !== 0) {\n        i ^= poly;\n      }\n    }\n\n    return s;\n  }\n\n  var rot = function rot(x) {\n    return x << 24 | x >>> 8;\n  }; // Generate encryption tables.\n\n\n  Te0 = new Uint32Array(256);\n  Te1 = new Uint32Array(256);\n  Te2 = new Uint32Array(256);\n  Te3 = new Uint32Array(256);\n\n  for (var i = 0; i < 256; i++) {\n    var s = SBOX0[i];\n    var w = mul(s, 2) << 24 | s << 16 | s << 8 | mul(s, 3);\n    Te0[i] = w;\n    w = rot(w);\n    Te1[i] = w;\n    w = rot(w);\n    Te2[i] = w;\n    w = rot(w);\n    Te3[i] = w;\n    w = rot(w);\n  } // Generate decryption tables.\n\n\n  Td0 = new Uint32Array(256);\n  Td1 = new Uint32Array(256);\n  Td2 = new Uint32Array(256);\n  Td3 = new Uint32Array(256);\n\n  for (var _i = 0; _i < 256; _i++) {\n    var _s = SBOX1[_i];\n\n    var _w = mul(_s, 0xe) << 24 | mul(_s, 0x9) << 16 | mul(_s, 0xd) << 8 | mul(_s, 0xb);\n\n    Td0[_i] = _w;\n    _w = rot(_w);\n    Td1[_i] = _w;\n    _w = rot(_w);\n    Td2[_i] = _w;\n    _w = rot(_w);\n    Td3[_i] = _w;\n    _w = rot(_w);\n  }\n\n  isInitialized = true;\n} // Reads 4 bytes from array starting at offset as big-endian\n// unsigned 32-bit integer and returns it.\n\n\nfunction readUint32BE(array) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;\n} // Writes 4-byte big-endian representation of 32-bit unsigned\n// value to byte array starting at offset.\n//\n// If byte array is not given, creates a new 4-byte one.\n//\n// Returns the output byte array.\n\n\nfunction writeUint32BE(value) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array(4);\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[offset + 0] = value >>> 24;\n  out[offset + 1] = value >>> 16;\n  out[offset + 2] = value >>> 8;\n  out[offset + 3] = value >>> 0;\n  return out;\n} // Apply sbox0 to each byte in w.\n\n\nfunction subw(w) {\n  return SBOX0[w >>> 24 & 0xff] << 24 | SBOX0[w >>> 16 & 0xff] << 16 | SBOX0[w >>> 8 & 0xff] << 8 | SBOX0[w & 0xff];\n} // Rotate\n\n\nfunction rotw(w) {\n  return w << 8 | w >>> 24;\n}\n\nfunction expandKey(key) {\n  var encKey = new Uint32Array(key.length + 28);\n  var nk = key.length / 4 | 0;\n  var n = encKey.length;\n\n  for (var i = 0; i < nk; i++) {\n    encKey[i] = readUint32BE(key, i * 4);\n  }\n\n  for (var _i2 = nk; _i2 < n; _i2++) {\n    var t = encKey[_i2 - 1];\n\n    if (_i2 % nk === 0) {\n      t = subw(rotw(t)) ^ POWX[_i2 / nk - 1] << 24;\n    } else if (nk > 6 && _i2 % nk === 4) {\n      t = subw(t);\n    }\n\n    encKey[_i2] = encKey[_i2 - nk] ^ t;\n  }\n\n  return encKey;\n}","map":null,"metadata":{},"sourceType":"script"}