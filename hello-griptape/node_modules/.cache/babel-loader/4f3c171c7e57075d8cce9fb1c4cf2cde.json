{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bip39 = __importStar(require(\"bip39\"));\n\nvar EnglishMnemonic = /*#__PURE__*/function () {\n  function EnglishMnemonic(mnemonic) {\n    _classCallCheck(this, EnglishMnemonic);\n\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n\n    var words = mnemonic.split(\" \");\n    var allowedWordsLengths = [12, 15, 18, 21, 24];\n\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(\"Invalid word count in mnemonic (allowed: \".concat(allowedWordsLengths, \" got: \").concat(words.length, \")\"));\n    }\n\n    var _iterator = _createForOfIteratorHelper(words),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var word = _step.value;\n\n        if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n          throw new Error(\"Mnemonic contains invalid word\");\n        }\n      } // Throws with informative error message if mnemonic is not valid\n      // tslint:disable-next-line:no-unused-expression\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n\n  _createClass(EnglishMnemonic, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.data;\n    }\n  }]);\n\n  return EnglishMnemonic;\n}();\n\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english; // list of space separated lower case words (1 or more)\n\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":null,"metadata":{},"sourceType":"script"}