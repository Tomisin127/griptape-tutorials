{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"@iov/crypto\");\n\nvar encoding_1 = require(\"./encoding\");\n\nvar signature_1 = require(\"./signature\");\n/**\n * Serach for sequence s with `min` <= `s` < `upperBound` to find the sequence that was used to sign the transaction\n *\n * @param tx The signed transaction\n * @param chainId The chain ID for which this transaction was signed\n * @param accountNumber The account number for which this transaction was signed\n * @param upperBound The upper bound for the testing, i.e. sequence must be lower than this value\n * @param min The lowest sequence that is tested\n *\n * @returns the sequence if a match was found and undefined otherwise\n */\n\n\nfunction findSequenceForSignedTx(_x, _x2, _x3, _x4) {\n  return _findSequenceForSignedTx.apply(this, arguments);\n}\n\nfunction _findSequenceForSignedTx() {\n  _findSequenceForSignedTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx, chainId, accountNumber, upperBound) {\n    var min,\n        firstSignature,\n        _signature_1$decodeSi,\n        pubkey,\n        signature,\n        secp256keSignature,\n        s,\n        signBytes,\n        prehashed,\n        valid,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            min = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;\n            firstSignature = tx.value.signatures.find(function () {\n              return true;\n            });\n\n            if (firstSignature) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(\"Signature missing in tx\");\n\n          case 4:\n            _signature_1$decodeSi = signature_1.decodeSignature(firstSignature), pubkey = _signature_1$decodeSi.pubkey, signature = _signature_1$decodeSi.signature;\n            secp256keSignature = crypto_1.Secp256k1Signature.fromFixedLength(signature);\n            s = min;\n\n          case 7:\n            if (!(s < upperBound)) {\n              _context.next = 18;\n              break;\n            }\n\n            // console.log(`Trying sequence ${s}`);\n            signBytes = encoding_1.makeSignBytes(tx.value.msg, tx.value.fee, chainId, tx.value.memo || \"\", accountNumber, s);\n            prehashed = new crypto_1.Sha256(signBytes).digest();\n            _context.next = 12;\n            return crypto_1.Secp256k1.verifySignature(secp256keSignature, prehashed, pubkey);\n\n          case 12:\n            valid = _context.sent;\n\n            if (!valid) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", s);\n\n          case 15:\n            s++;\n            _context.next = 7;\n            break;\n\n          case 18:\n            return _context.abrupt(\"return\", undefined);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _findSequenceForSignedTx.apply(this, arguments);\n}\n\nexports.findSequenceForSignedTx = findSequenceForSignedTx;","map":null,"metadata":{},"sourceType":"script"}