{"ast":null,"code":"\"use strict\";\n/**\n * hkdf.js\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar params_1 = __importDefault(require(\"./params\"));\n\nvar util = __importStar(require(\"js-crypto-env\"));\n\nvar js_crypto_random_1 = __importDefault(require(\"js-crypto-random\"));\n\nvar js_crypto_hmac_1 = __importDefault(require(\"js-crypto-hmac\"));\n\nvar js_encoding_utils_1 = __importDefault(require(\"js-encoding-utils\"));\n/**\n * Hash-based Key Derivation Function computing from given master secret and salt.\n * If salt is not given, salt would be automatically generated inside.\n * Specification is given in RFC5869 {@link https://tools.ietf.org/html/rfc5869}.\n * @param {Uint8Array} master - Master secret to derive the key.\n * @param {String} [hash='SHA-256] - Name of hash algorithm used to derive the key.\n * @param {Number} [length = 32] - Intended length of derived key.\n * @param {String} [info=''] - String for information field of HKDF.\n * @param {Uint8Array} [salt=null] - Byte array of salt.\n * @return {Promise<{key: Uint8Array, salt: Uint8Array}>} - Derived key and salt used to derive the key.\n */\n\n\nexports.compute = function (master, hash, length, info, salt) {\n  if (hash === void 0) {\n    hash = 'SHA-256';\n  }\n\n  if (length === void 0) {\n    length = 32;\n  }\n\n  if (info === void 0) {\n    info = '';\n  }\n\n  if (salt === void 0) {\n    salt = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var env, key, masterObj, hkdfCtrParams, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          env = util.getCrypto();\n          if (!salt) salt = js_crypto_random_1.default.getRandomBytes(length);\n          if (!(env.name === 'webCrypto' && typeof env.crypto.importKey === 'function' && typeof env.crypto.deriveBits === 'function')) return [3\n          /*break*/\n          , 7];\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , env.crypto.importKey('raw', master, {\n            name: 'HKDF'\n          }, false, ['deriveKey', 'deriveBits'])];\n\n        case 2:\n          masterObj = _a.sent();\n          hkdfCtrParams = {\n            name: 'HKDF',\n            salt: salt,\n            info: js_encoding_utils_1.default.encoder.stringToArrayBuffer(info),\n            hash: hash\n          };\n          return [4\n          /*yield*/\n          , env.crypto.deriveBits(hkdfCtrParams, masterObj, length * 8)];\n\n        case 3:\n          key = _a.sent();\n          key = new Uint8Array(key);\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          e_1 = _a.sent();\n          return [4\n          /*yield*/\n          , rfc5869(master, hash, length, info, salt)];\n\n        case 5:\n          key = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [3\n          /*break*/\n          , 9];\n\n        case 7:\n          return [4\n          /*yield*/\n          , rfc5869(master, hash, length, info, salt)];\n\n        case 8:\n          key = _a.sent();\n          _a.label = 9;\n\n        case 9:\n          return [2\n          /*return*/\n          , {\n            key: key,\n            salt: salt\n          }];\n      }\n    });\n  });\n};\n/**\n * Naive implementation of RFC5869 in PureJavaScript\n * @param {Uint8Array} master - Master secret to derive the key.\n * @param {String} hash - Name of hash algorithm used to derive the key.\n * @param {Number} length - Intended length of derived key.\n * @param {String} info - String for information field of HKDF.\n * @param {Uint8Array} salt - Byte array of salt.\n * @return {Promise<Uint8Array>} - Derived key.\n */\n\n\nvar rfc5869 = function rfc5869(master, hash, length, info, salt) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var len, prk, t, okm, uintInfo, i, concat;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          len = params_1.default.hashes[hash].hashSize;\n          return [4\n          /*yield*/\n          , js_crypto_hmac_1.default.compute(salt, master, hash)];\n\n        case 1:\n          prk = _a.sent();\n          t = new Uint8Array([]);\n          okm = new Uint8Array(Math.ceil(length / len) * len);\n          uintInfo = js_encoding_utils_1.default.encoder.stringToArrayBuffer(info);\n          i = 0;\n          _a.label = 2;\n\n        case 2:\n          if (!(i < Math.ceil(length / len))) return [3\n          /*break*/\n          , 5];\n          concat = new Uint8Array(t.length + uintInfo.length + 1);\n          concat.set(t);\n          concat.set(uintInfo, t.length);\n          concat.set(new Uint8Array([i + 1]), t.length + uintInfo.length);\n          return [4\n          /*yield*/\n          , js_crypto_hmac_1.default.compute(prk, concat, hash)];\n\n        case 3:\n          t = _a.sent();\n          okm.set(t, len * i);\n          _a.label = 4;\n\n        case 4:\n          i++;\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          return [2\n          /*return*/\n          , okm.slice(0, length)];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}