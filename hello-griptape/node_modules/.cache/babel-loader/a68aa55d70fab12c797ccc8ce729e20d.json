{"ast":null,"code":"\"use strict\"; // Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constant_time_1 = require(\"./internals/constant-time\");\n\nvar wipe_1 = require(\"./internals/wipe\");\n\nvar xor_1 = require(\"./internals/xor\");\n\nvar exceptions_1 = require(\"./exceptions\");\n\nvar block_1 = require(\"./internals/block\");\n\nvar cmac_1 = require(\"./mac/cmac\");\n\nvar pmac_1 = require(\"./mac/pmac\");\n\nvar webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\n\n\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\n\nvar SIV = /*#__PURE__*/function () {\n  _createClass(SIV, null, [{\n    key: \"importKey\",\n\n    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n    value: function importKey(keyData, alg) {\n      var provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var macKey, encKey, mac, ctr;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(keyData.length !== 32 && keyData.length !== 64)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: key must be 32 or 64-bytes (got \".concat(keyData.length));\n\n              case 2:\n                macKey = keyData.subarray(0, keyData.length / 2 | 0);\n                encKey = keyData.subarray(keyData.length / 2 | 0);\n                _context.t0 = alg;\n                _context.next = _context.t0 === \"AES-SIV\" ? 7 : _context.t0 === \"AES-CMAC-SIV\" ? 11 : _context.t0 === \"AES-PMAC-SIV\" ? 15 : 19;\n                break;\n\n              case 7:\n                _context.next = 9;\n                return cmac_1.CMAC.importKey(provider, macKey);\n\n              case 9:\n                mac = _context.sent;\n                return _context.abrupt(\"break\", 20);\n\n              case 11:\n                _context.next = 13;\n                return cmac_1.CMAC.importKey(provider, macKey);\n\n              case 13:\n                mac = _context.sent;\n                return _context.abrupt(\"break\", 20);\n\n              case 15:\n                _context.next = 17;\n                return pmac_1.PMAC.importKey(provider, macKey);\n\n              case 17:\n                mac = _context.sent;\n                return _context.abrupt(\"break\", 20);\n\n              case 19:\n                throw new exceptions_1.NotImplementedError(\"Miscreant: algorithm not supported: \".concat(alg));\n\n              case 20:\n                _context.next = 22;\n                return provider.importCTRKey(encKey);\n\n              case 22:\n                ctr = _context.sent;\n                return _context.abrupt(\"return\", new SIV(mac, ctr));\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }]);\n\n  function SIV(mac, ctr) {\n    _classCallCheck(this, SIV);\n\n    this._mac = mac;\n    this._ctr = ctr;\n    this._tmp1 = new block_1.default();\n    this._tmp2 = new block_1.default();\n  }\n  /** Encrypt and authenticate data using AES-SIV */\n\n\n  _createClass(SIV, [{\n    key: \"seal\",\n    value: function seal(plaintext, associatedData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var resultLength, result, iv;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(associatedData.length > exports.MAX_ASSOCIATED_DATA)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: too many associated data items\");\n\n              case 2:\n                // Allocate space for sealed ciphertext.\n                resultLength = block_1.default.SIZE + plaintext.length;\n                result = new Uint8Array(resultLength); // Authenticate.\n\n                _context2.next = 6;\n                return this._s2v(associatedData, plaintext);\n\n              case 6:\n                iv = _context2.sent;\n                result.set(iv); // Encrypt.\n\n                zeroIVBits(iv);\n                _context2.t0 = result;\n                _context2.next = 12;\n                return this._ctr.encryptCtr(iv, plaintext);\n\n              case 12:\n                _context2.t1 = _context2.sent;\n                _context2.t2 = iv.length;\n\n                _context2.t0.set.call(_context2.t0, _context2.t1, _context2.t2);\n\n                return _context2.abrupt(\"return\", result);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /** Decrypt and authenticate data using AES-SIV */\n\n  }, {\n    key: \"open\",\n    value: function open(sealed, associatedData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var tag, iv, result, expectedTag;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(associatedData.length > exports.MAX_ASSOCIATED_DATA)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: too many associated data items\");\n\n              case 2:\n                if (!(sealed.length < block_1.default.SIZE)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n\n              case 4:\n                // Decrypt.\n                tag = sealed.subarray(0, block_1.default.SIZE);\n                iv = this._tmp1.data;\n                iv.set(tag);\n                zeroIVBits(iv); // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n\n                _context3.next = 10;\n                return this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n\n              case 10:\n                result = _context3.sent;\n                _context3.next = 13;\n                return this._s2v(associatedData, result);\n\n              case 13:\n                expectedTag = _context3.sent;\n\n                if (constant_time_1.equal(expectedTag, tag)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                wipe_1.wipe(result);\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n\n              case 17:\n                return _context3.abrupt(\"return\", result);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._tmp1.clear();\n\n      this._tmp2.clear();\n\n      this._ctr.clear();\n\n      this._mac.clear();\n\n      return this;\n    }\n    /**\n     * The S2V operation consists of the doubling and XORing of the outputs\n     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n     *\n     * See Section 2.4 of RFC 5297 for more information\n     */\n\n  }, {\n    key: \"_s2v\",\n    value: function _s2v(associated_data, plaintext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iterator, _step, ad, n;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._mac.reset();\n\n                this._tmp1.clear(); // Note: the standalone S2V returns CMAC(1) if the number of passed\n                // vectors is zero, however in SIV construction this case is never\n                // triggered, since we always pass plaintext as the last vector (even\n                // if it's zero-length), so we omit this case.\n\n\n                _context4.next = 4;\n                return this._mac.update(this._tmp1.data);\n\n              case 4:\n                this._tmp2.clear();\n\n                _context4.t0 = this._tmp2.data;\n                _context4.next = 8;\n                return this._mac.finish();\n\n              case 8:\n                _context4.t1 = _context4.sent;\n\n                _context4.t0.set.call(_context4.t0, _context4.t1);\n\n                this._mac.reset();\n\n                _iterator = _createForOfIteratorHelper(associated_data);\n                _context4.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                ad = _step.value;\n                _context4.next = 18;\n                return this._mac.update(ad);\n\n              case 18:\n                this._tmp1.clear();\n\n                _context4.t2 = this._tmp1.data;\n                _context4.next = 22;\n                return this._mac.finish();\n\n              case 22:\n                _context4.t3 = _context4.sent;\n\n                _context4.t2.set.call(_context4.t2, _context4.t3);\n\n                this._mac.reset();\n\n                this._tmp2.dbl();\n\n                xor_1.xor(this._tmp2.data, this._tmp1.data);\n\n              case 27:\n                _context4.next = 14;\n                break;\n\n              case 29:\n                _context4.next = 34;\n                break;\n\n              case 31:\n                _context4.prev = 31;\n                _context4.t4 = _context4[\"catch\"](12);\n\n                _iterator.e(_context4.t4);\n\n              case 34:\n                _context4.prev = 34;\n\n                _iterator.f();\n\n                return _context4.finish(34);\n\n              case 37:\n                this._tmp1.clear();\n\n                if (!(plaintext.length >= block_1.default.SIZE)) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                n = plaintext.length - block_1.default.SIZE;\n\n                this._tmp1.data.set(plaintext.subarray(n));\n\n                _context4.next = 43;\n                return this._mac.update(plaintext.subarray(0, n));\n\n              case 43:\n                _context4.next = 48;\n                break;\n\n              case 45:\n                this._tmp1.data.set(plaintext);\n\n                this._tmp1.data[plaintext.length] = 0x80;\n\n                this._tmp2.dbl();\n\n              case 48:\n                xor_1.xor(this._tmp1.data, this._tmp2.data);\n                _context4.next = 51;\n                return this._mac.update(this._tmp1.data);\n\n              case 51:\n                return _context4.abrupt(\"return\", this._mac.finish());\n\n              case 52:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[12, 31, 34, 37]]);\n      }));\n    }\n  }]);\n\n  return SIV;\n}();\n\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\n\nfunction zeroIVBits(iv) {\n  // \"We zero-out the top bit in each of the last two 32-bit words\n  // of the IV before assigning it to Ctr\"\n  //  — http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n  iv[iv.length - 8] &= 0x7f;\n  iv[iv.length - 4] &= 0x7f;\n}","map":null,"metadata":{},"sourceType":"script"}