{"ast":null,"code":"\"use strict\";\n/**\n * formatter.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoder = __importStar(require(\"./encoder\"));\n\nvar PemArmorString = {\n  'public': 'PUBLIC KEY',\n  'private': 'PRIVATE KEY',\n  'encryptedPrivate': 'ENCRYPTED PRIVATE KEY',\n  'certificate': 'CERTIFICATE',\n  'certRequest': 'CERTIFICATE REQUEST'\n};\n/**\n * Convert PEM armored string to Uint8Array\n * @param keydataB64Pem\n * @return {Uint8Array}\n */\n\nexports.pemToBin = function (keydataB64Pem) {\n  var keydataB64 = dearmorPem(keydataB64Pem);\n  return encoder.decodeBase64(keydataB64);\n};\n/**\n * Convert ArrayBuffer or TypedArray to PEM armored string with a specified type\n * @param keydata\n * @param type\n * @return {string}\n */\n\n\nexports.binToPem = function (keydata, type) {\n  var keydataB64 = encoder.encodeBase64(keydata);\n  return formatAsPem(keydataB64, type);\n};\n/**\n * Armor the given Base64 string and return PEM formatted string\n * @param str\n * @param type\n * @return {string}\n */\n\n\nvar formatAsPem = function formatAsPem(str, type) {\n  var typeString = PemArmorString[type];\n  var finalString = \"-----BEGIN \" + typeString + \"-----\\n\";\n\n  while (str.length > 0) {\n    finalString += str.substring(0, 64) + \"\\n\";\n    str = str.substring(64);\n  }\n\n  finalString = finalString + \"-----END \" + typeString + \"-----\";\n  return finalString;\n};\n/**\n * Dearmor the given PEM string and return Base64 string\n * @param str\n * @return {string}\n */\n\n\nvar dearmorPem = function dearmorPem(str) {\n  // const beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*KEY-----$', 'gm');\n  // const endRegExp = RegExp('^-----[\\s]*END[^-]*KEY-----$', 'gm');\n  var beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*-----$', 'gm');\n  var endRegExp = RegExp('^-----[\\s]*END[^-]*-----$', 'gm'); // check if the object starts from 'begin'\n\n  try {\n    var dearmored = str.split(beginRegExp)[1].split(endRegExp)[0];\n    dearmored = dearmored.replace(/\\r?\\n/g, '');\n    return dearmored;\n  } catch (e) {\n    throw new Error('Invalid format as PEM');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}