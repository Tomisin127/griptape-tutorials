{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorHandler = exports.onContractError = exports.DefaultErrorHandler = exports.OutOfGasErrorHandler = void 0;\n\nvar types_1 = require(\"./types\");\n\nvar OutOfGasErrorHandler = function (_super) {\n  __extends(OutOfGasErrorHandler, _super);\n\n  function OutOfGasErrorHandler(handler) {\n    return _super.call(this, function (e) {\n      return e.toString().match(/insufficient fee/g);\n    }, handler) || this;\n  }\n\n  return OutOfGasErrorHandler;\n}(types_1.ErrorHandler);\n\nexports.OutOfGasErrorHandler = OutOfGasErrorHandler;\n\nvar DefaultErrorHandler = function (_super) {\n  __extends(DefaultErrorHandler, _super);\n\n  function DefaultErrorHandler(handler) {\n    return _super.call(this, function (e) {\n      return true;\n    }, handler) || this;\n  }\n\n  return DefaultErrorHandler;\n}(types_1.ErrorHandler);\n\nexports.DefaultErrorHandler = DefaultErrorHandler;\nvar errorHandlers = {};\n\nfunction onContractError(contract, handler) {\n  var contractId = contract.id;\n  var currentContracts = Object.keys(errorHandlers);\n\n  if (!currentContracts.includes(contractId)) {\n    errorHandlers[contractId] = [];\n  }\n\n  var handlers = errorHandlers[contractId];\n  var hasHandler = handlers.find(function (it) {\n    return it.constructor.name === handler.constructor.name;\n  });\n\n  if (!hasHandler) {\n    errorHandlers[contractId].push(handler);\n  }\n}\n\nexports.onContractError = onContractError;\n\nfunction getErrorHandler(id, e) {\n  var _a;\n\n  return (_a = errorHandlers[id]) === null || _a === void 0 ? void 0 : _a.find(function (it) {\n    return it.test(e);\n  });\n}\n\nexports.getErrorHandler = getErrorHandler;","map":null,"metadata":{},"sourceType":"script"}