{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar miscreant = require(\"miscreant\");\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar curve25519_js_1 = require(\"curve25519-js\");\n\nvar secureRandom = require(\"secure-random\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar hkdf = require(\"js-crypto-hkdf\");\n\nvar cryptoProvider = new miscreant.PolyfillCryptoProvider();\nvar hkdfSalt = Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4b, 0xea, 0xd8, 0xdf, 0x69, 0x99, 0x08, 0x52, 0xc2, 0x02, 0xdb, 0x0e, 0x00, 0x97, 0xc1, 0xa1, 0x2e, 0xa6, 0x37, 0xd7, 0xe9, 0x6d]);\n\nvar EnigmaUtils = /*#__PURE__*/function () {\n  function EnigmaUtils(apiUrl, seed) {\n    _classCallCheck(this, EnigmaUtils);\n\n    this.consensusIoPubKey = new Uint8Array(); // cache\n\n    this.apiUrl = apiUrl;\n\n    if (!seed) {\n      this.seed = EnigmaUtils.GenerateNewSeed();\n    } else {\n      this.seed = seed;\n    }\n\n    var _EnigmaUtils$Generate = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed),\n        privkey = _EnigmaUtils$Generate.privkey,\n        pubkey = _EnigmaUtils$Generate.pubkey;\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  _createClass(EnigmaUtils, [{\n    key: \"getConsensusIoPubKey\",\n    value: function () {\n      var _getConsensusIoPubKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$axios_1$defaul, TxKey;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.consensusIoPubKey.length === 32)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.consensusIoPubKey);\n\n              case 2:\n                _context.next = 4;\n                return axios_1.default.get(this.apiUrl + \"/reg/tx-key\", {\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  }\n                });\n\n              case 4:\n                _yield$axios_1$defaul = _context.sent;\n                TxKey = _yield$axios_1$defaul.data.result.TxKey;\n                this.consensusIoPubKey = encoding_1.Encoding.fromBase64(TxKey);\n                return _context.abrupt(\"return\", this.consensusIoPubKey);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getConsensusIoPubKey() {\n        return _getConsensusIoPubKey.apply(this, arguments);\n      }\n\n      return getConsensusIoPubKey;\n    }()\n  }, {\n    key: \"getTxEncryptionKey\",\n    value: function () {\n      var _getTxEncryptionKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(nonce) {\n        var consensusIoPubKey, txEncryptionIkm, _yield$hkdf$compute, txEncryptionKey;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getConsensusIoPubKey();\n\n              case 2:\n                consensusIoPubKey = _context2.sent;\n                txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n                _context2.next = 6;\n                return hkdf.compute(Uint8Array.from([].concat(_toConsumableArray(txEncryptionIkm), _toConsumableArray(nonce))), \"SHA-256\", 32, \"\", hkdfSalt);\n\n              case 6:\n                _yield$hkdf$compute = _context2.sent;\n                txEncryptionKey = _yield$hkdf$compute.key;\n                return _context2.abrupt(\"return\", txEncryptionKey);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTxEncryptionKey(_x) {\n        return _getTxEncryptionKey.apply(this, arguments);\n      }\n\n      return getTxEncryptionKey;\n    }()\n  }, {\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contractCodeHash, msg) {\n        var nonce, txEncryptionKey, siv, plaintext, ciphertext;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                nonce = secureRandom(32, {\n                  type: \"Uint8Array\"\n                });\n                _context3.next = 3;\n                return this.getTxEncryptionKey(nonce);\n\n              case 3:\n                txEncryptionKey = _context3.sent;\n                _context3.next = 6;\n                return miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n\n              case 6:\n                siv = _context3.sent;\n                plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n                _context3.next = 10;\n                return siv.seal(plaintext, [new Uint8Array()]);\n\n              case 10:\n                ciphertext = _context3.sent;\n                return _context3.abrupt(\"return\", Uint8Array.from([].concat(_toConsumableArray(nonce), _toConsumableArray(this.pubkey), _toConsumableArray(ciphertext))));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function encrypt(_x2, _x3) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ciphertext, nonce) {\n        var _a, txEncryptionKey, siv, plaintext;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if ((_a = ciphertext) === null || _a === void 0 ? void 0 : _a.length) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", new Uint8Array());\n\n              case 2:\n                _context4.next = 4;\n                return this.getTxEncryptionKey(nonce);\n\n              case 4:\n                txEncryptionKey = _context4.sent;\n                _context4.next = 7;\n                return miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n\n              case 7:\n                siv = _context4.sent;\n                _context4.next = 10;\n                return siv.open(ciphertext, [new Uint8Array()]);\n\n              case 10:\n                plaintext = _context4.sent;\n                return _context4.abrupt(\"return\", plaintext);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function decrypt(_x4, _x5) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }, {\n    key: \"getPubkey\",\n    value: function getPubkey() {\n      return Promise.resolve(this.pubkey);\n    }\n  }], [{\n    key: \"GenerateNewKeyPair\",\n    value: function GenerateNewKeyPair() {\n      return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n    }\n  }, {\n    key: \"GenerateNewSeed\",\n    value: function GenerateNewSeed() {\n      return secureRandom(32, {\n        type: \"Uint8Array\"\n      });\n    }\n  }, {\n    key: \"GenerateNewKeyPairFromSeed\",\n    value: function GenerateNewKeyPairFromSeed(seed) {\n      var _curve25519_js_1$gene = curve25519_js_1.generateKeyPair(seed),\n          privkey = _curve25519_js_1$gene.private,\n          pubkey = _curve25519_js_1$gene.public;\n\n      return {\n        privkey: privkey,\n        pubkey: pubkey\n      };\n    }\n  }]);\n\n  return EnigmaUtils;\n}();\n\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;","map":null,"metadata":{},"sourceType":"script"}