{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"./encoding\");\n\nvar typechecks_1 = require(\"./typechecks\");\n\nvar prefixes = {\n  string: \"string:\",\n  bytes: \"bytes:\"\n};\n/**\n * Encodes non-circular JavaScript objects and primitives into JSON.\n * Used for encoding/decoding transactions but works for kind of data consisting of the supported types.\n *\n * Supported types:\n * - boolean\n * - number\n * - null\n * - object\n * - Array\n * - string\n * - Uint8Array\n */\n\nvar TransactionEncoder = /*#__PURE__*/function () {\n  function TransactionEncoder() {\n    _classCallCheck(this, TransactionEncoder);\n  }\n\n  _createClass(TransactionEncoder, null, [{\n    key: \"toJson\",\n    value: function toJson(data) {\n      if (typeof data === \"number\" || typeof data === \"boolean\") {\n        return data;\n      }\n\n      if (data === null) {\n        return null;\n      }\n\n      if (typeof data === \"string\") {\n        return \"\".concat(prefixes.string).concat(data);\n      }\n\n      if (typechecks_1.isUint8Array(data)) {\n        return \"\".concat(prefixes.bytes).concat(encoding_1.Encoding.toHex(data));\n      }\n\n      if (Array.isArray(data)) {\n        return data.map(TransactionEncoder.toJson);\n      } // Exclude special kind of objects like Array, Date or Uint8Array\n      // Object.prototype.toString() returns a specified value:\n      // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n      if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n        var out = {};\n\n        for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          var value = data[key]; // Skip dictionary entries with value `undefined`, just like native JSON:\n          // > JSON.stringify({ foo: undefined })\n          // '{}'\n\n          if (value === undefined) continue; // tslint:disable-next-line: no-object-mutation\n\n          out[key] = TransactionEncoder.toJson(value);\n        }\n\n        return out;\n      }\n\n      throw new Error(\"Cannot encode type to JSON\");\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(data) {\n      if (typeof data === \"number\" || typeof data === \"boolean\") {\n        return data;\n      }\n\n      if (data === null) {\n        return null;\n      }\n\n      if (typeof data === \"string\") {\n        if (data.startsWith(prefixes.string)) {\n          return data.slice(prefixes.string.length);\n        }\n\n        if (data.startsWith(prefixes.bytes)) {\n          return encoding_1.Encoding.fromHex(data.slice(prefixes.bytes.length));\n        }\n\n        throw new Error(\"Found string with unknown prefix\");\n      }\n\n      if (Array.isArray(data)) {\n        return data.map(TransactionEncoder.fromJson);\n      } // Exclude special kind of objects like Array, Date or Uint8Array\n      // Object.prototype.toString() returns a specified value:\n      // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n      if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n        var out = {};\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(data); _i2 < _Object$keys2.length; _i2++) {\n          var key = _Object$keys2[_i2];\n          // tslint:disable-next-line: no-object-mutation\n          out[key] = TransactionEncoder.fromJson(data[key]);\n        }\n\n        return out;\n      }\n\n      throw new Error(\"Cannot decode type from JSON\");\n    }\n  }]);\n\n  return TransactionEncoder;\n}();\n\nexports.TransactionEncoder = TransactionEncoder;","map":null,"metadata":{},"sourceType":"script"}