{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar block_1 = require(\"../internals/block\");\n\nvar xor_1 = require(\"../internals/xor\");\n/**\n * The AES-CMAC message authentication code\n */\n\n\nvar CMAC = /*#__PURE__*/function () {\n  function CMAC(_cipher, _subkey1, _subkey2) {\n    _classCallCheck(this, CMAC);\n\n    this._cipher = _cipher;\n    this._subkey1 = _subkey1;\n    this._subkey2 = _subkey2;\n    this._bufferPos = 0;\n    this._finished = false;\n    this._buffer = new block_1.default();\n  }\n  /** Create a new CMAC instance from the given key */\n\n\n  _createClass(CMAC, [{\n    key: \"reset\",\n    value: function reset() {\n      this._buffer.clear();\n\n      this._bufferPos = 0;\n      this._finished = false;\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.reset();\n\n      this._subkey1.clear();\n\n      this._subkey2.clear();\n    }\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var left, dataPos, dataLength, i, _i, _i2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                left = block_1.default.SIZE - this._bufferPos;\n                dataPos = 0;\n                dataLength = data.length;\n\n                if (!(dataLength > left)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                for (i = 0; i < left; i++) {\n                  this._buffer.data[this._bufferPos + i] ^= data[i];\n                }\n\n                dataLength -= left;\n                dataPos += left;\n                _context.next = 9;\n                return this._cipher.encryptBlock(this._buffer);\n\n              case 9:\n                this._bufferPos = 0;\n\n              case 10:\n                if (!(dataLength > block_1.default.SIZE)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                for (_i = 0; _i < block_1.default.SIZE; _i++) {\n                  this._buffer.data[_i] ^= data[dataPos + _i];\n                }\n\n                dataLength -= block_1.default.SIZE;\n                dataPos += block_1.default.SIZE;\n                _context.next = 16;\n                return this._cipher.encryptBlock(this._buffer);\n\n              case 16:\n                _context.next = 10;\n                break;\n\n              case 18:\n                for (_i2 = 0; _i2 < dataLength; _i2++) {\n                  this._buffer.data[this._bufferPos++] ^= data[dataPos + _i2];\n                }\n\n                return _context.abrupt(\"return\", this);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var subkey;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._finished) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                // Select which subkey to use.\n                subkey = this._bufferPos < block_1.default.SIZE ? this._subkey2 : this._subkey1; // XOR in the subkey.\n\n                xor_1.xor(this._buffer.data, subkey.data); // Pad if needed.\n\n                if (this._bufferPos < block_1.default.SIZE) {\n                  this._buffer.data[this._bufferPos] ^= 0x80;\n                } // Encrypt buffer to get the final digest.\n\n\n                _context2.next = 6;\n                return this._cipher.encryptBlock(this._buffer);\n\n              case 6:\n                // Set finished flag.\n                this._finished = true;\n\n              case 7:\n                return _context2.abrupt(\"return\", this._buffer.clone().data);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }], [{\n    key: \"importKey\",\n    value: function importKey(provider, keyData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cipher, subkey1, subkey2;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return provider.importBlockCipherKey(keyData);\n\n              case 2:\n                cipher = _context3.sent;\n                // Generate subkeys.\n                subkey1 = new block_1.default();\n                _context3.next = 6;\n                return cipher.encryptBlock(subkey1);\n\n              case 6:\n                subkey1.dbl();\n                subkey2 = subkey1.clone();\n                subkey2.dbl();\n                return _context3.abrupt(\"return\", new CMAC(cipher, subkey1, subkey2));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }]);\n\n  return CMAC;\n}();\n\nexports.CMAC = CMAC;","map":null,"metadata":{},"sourceType":"script"}