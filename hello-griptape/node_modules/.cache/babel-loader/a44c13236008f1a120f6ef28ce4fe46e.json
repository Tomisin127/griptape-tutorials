{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;\n\nvar _buffer = require(\"buffer\");\n\nvar _sponge = _interopRequireDefault(require(\"./sponge\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar createHash = function createHash(_ref) {\n  var allowedSizes = _ref.allowedSizes,\n      defaultSize = _ref.defaultSize,\n      padding = _ref.padding;\n  return function Hash() {\n    var _this = this;\n\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n\n    if (!this || this.constructor !== Hash) {\n      return new Hash(size);\n    }\n\n    if (allowedSizes && !allowedSizes.includes(size)) {\n      throw new Error(\"Unsupported hash length\");\n    }\n\n    var sponge = new _sponge[\"default\"]({\n      capacity: size\n    });\n\n    this.update = function (input) {\n      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"utf8\";\n\n      if (_buffer.Buffer.isBuffer(input)) {\n        sponge.absorb(input);\n        return _this;\n      }\n\n      if (typeof input === \"string\") {\n        return _this.update(_buffer.Buffer.from(input, encoding));\n      }\n\n      throw new TypeError(\"Not a string or buffer\");\n    };\n\n    this.digest = function () {\n      var formatOrOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"binary\";\n      var options = typeof formatOrOptions === \"string\" ? {\n        format: formatOrOptions\n      } : formatOrOptions;\n      var buffer = sponge.squeeze({\n        buffer: options.buffer,\n        padding: options.padding || padding\n      });\n\n      if (options.format && options.format !== \"binary\") {\n        return buffer.toString(options.format);\n      }\n\n      return buffer;\n    };\n\n    this.reset = function () {\n      sponge.reset();\n      return _this;\n    };\n\n    return this;\n  };\n};\n\nvar Keccak = createHash({\n  allowedSizes: [224, 256, 384, 512],\n  defaultSize: 512,\n  padding: 1\n});\nexports.Keccak = Keccak;\nvar SHA3 = createHash({\n  allowedSizes: [224, 256, 384, 512],\n  defaultSize: 512,\n  padding: 6\n});\nexports.SHA3 = SHA3;\nvar SHAKE = createHash({\n  allowedSizes: [128, 256],\n  defaultSize: 256,\n  padding: 31\n});\nexports.SHAKE = SHAKE;\nvar SHA3Hash = Keccak;\nexports.SHA3Hash = SHA3Hash;\nSHA3.SHA3Hash = SHA3Hash;\nvar _default = SHA3;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}