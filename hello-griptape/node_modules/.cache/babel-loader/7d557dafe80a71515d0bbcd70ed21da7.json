{"ast":null,"code":"\"use strict\";\n/**\n * hash.js\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = __importStar(require(\"js-crypto-env\"));\n\nvar params_1 = __importDefault(require(\"./params\"));\n\nvar md5_1 = __importDefault(require(\"md5\"));\n\nvar sha3_1 = require(\"sha3\");\n\nvar hash_js_1 = __importDefault(require(\"hash.js\"));\n/**\n * Compute Hash value.\n * @param {Uint8Array} msg - Byte array of message to be hashed.\n * @param {HashTypes} [hash = 'SHA-256'] - Name of hash algorithm like 'SHA-256'.\n * @return {Promise<Uint8Array>} - Hash value\n * @throws {Error} - Throws if UnsupportedHashAlgorithm, UnsupportedMessageType,\n *  or UnsupportedEnvironment, i.e., a case where even pure js implementation won't work.\n */\n\n\nexports.compute = function (msg, hash) {\n  if (hash === void 0) {\n    hash = 'SHA-256';\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var env, msgHash, errMsg, native, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          env = util.getCrypto();\n          native = true;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 8,, 9]);\n\n          if (!(env.name === 'webCrypto' && typeof env.crypto.digest === 'function')) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , env.crypto.digest(hash, msg)];\n\n        case 2:\n          msgHash = _a.sent();\n          return [3\n          /*break*/\n          , 7];\n\n        case 3:\n          if (!(env.name === 'nodeCrypto')) return [3\n          /*break*/\n          , 4];\n          msgHash = nodedigest(hash, msg, env.crypto);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          if (!(env.name === 'msCrypto' && typeof env.crypto.digest === 'function')) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , msdigest(hash, msg, env.crypto)];\n\n        case 5:\n          msgHash = _a.sent();\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          native = false;\n          _a.label = 7;\n\n        case 7:\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          e_1 = _a.sent();\n          errMsg = e_1.message;\n          native = false;\n          return [3\n          /*break*/\n          , 9];\n\n        case 9:\n          if (!native) {\n            try {\n              msgHash = purejs(hash, msg);\n            } catch (e) {\n              errMsg = (typeof errMsg === 'undefined' ? '' : errMsg) + \" => \" + e.message;\n              throw new Error(\"UnsupportedEnvironment: \" + errMsg);\n            }\n          }\n\n          return [2\n          /*return*/\n          , new Uint8Array(msgHash)];\n      }\n    });\n  });\n};\n/**\n * Compute hash using MsCrypto implementation\n * @param {HashTypes} hash - Name of hash algorithm like SHA-256\n * @param {Uint8Array} msg - Byte array of message to be hashed.\n * @param {Object} msCrypto - msCrypto object.\n * @return {Promise<Uint8Array>} - Hash value.\n * @throws {Error} - Throws if hashing failed.\n */\n\n\nvar msdigest = function msdigest(hash, msg, msCrypto) {\n  return new Promise(function (resolve, reject) {\n    var op = msCrypto.digest(hash, msg);\n\n    op.oncomplete = function (evt) {\n      resolve(evt.target.result);\n    };\n\n    op.onerror = function (e) {\n      reject(e);\n    };\n  });\n};\n/**\n * Compute hash using Node.js implementation\n * @param {String} hash - Name of hash algorithm like SHA-256\n * @param {Uint8Array} msg - Byte array of message to be hashed.\n * @param {Object} nodeCrypto - Node.js crypto object.\n * @return {Uint8Array} - Hash value.\n */\n\n\nvar nodedigest = function nodedigest(hash, msg, nodeCrypto) {\n  var alg = params_1.default.hashes[hash].nodeName;\n  var hashFunc = nodeCrypto.createHash(alg);\n  hashFunc.update(msg);\n  return hashFunc.digest();\n};\n/**\n * Compute hash using pure js implementations\n * @param {String} hash - Name of hash algorithm like SHA-256\n * @param {Uint8Array} msg - Byte array of message to be hashed.\n * @return {Uint8Array} - Hash value.\n */\n\n\nvar purejs = function purejs(hash, msg) {\n  var h;\n\n  if (hash === 'MD5') {\n    h = md5_1.default(Array.from(msg), {\n      asBytes: true\n    });\n  } else if (['SHA3-512', 'SHA3-384', 'SHA3-256', 'SHA3-224'].indexOf(hash) >= 0) {\n    // sha3\n    var sha3Len = params_1.default.hashes[hash].hashSize * 8;\n    var sha3obj = new sha3_1.SHA3(sha3Len);\n\n    var Buffer_1 = require('buffer/').Buffer;\n\n    sha3obj.update(Buffer_1.from(msg));\n    h = sha3obj.digest('binary');\n  } else {\n    // @ts-ignore\n    h = hash_js_1.default[params_1.default.hashes[hash].nodeName]().update(msg).digest();\n  }\n\n  return new Uint8Array(h);\n};","map":null,"metadata":{},"sourceType":"script"}