{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\hello-griptape-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * AES-CTR using a WebCrypto (or similar) API\n */\n\nvar WebCryptoAesCtr = /*#__PURE__*/function () {\n  function WebCryptoAesCtr(key, crypto) {\n    _classCallCheck(this, WebCryptoAesCtr);\n\n    this.key = key;\n    this.crypto = crypto;\n  }\n\n  _createClass(WebCryptoAesCtr, [{\n    key: \"encryptCtr\",\n    value: function encryptCtr(iv, plaintext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var ciphertext;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.crypto.subtle.encrypt({\n                  name: \"AES-CTR\",\n                  counter: iv,\n                  length: 16\n                }, this.key, plaintext);\n\n              case 2:\n                ciphertext = _context.sent;\n                return _context.abrupt(\"return\", new Uint8Array(ciphertext));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // TODO: actually clear something. Do we need to?\n      return this;\n    }\n  }], [{\n    key: \"importKey\",\n    value: function importKey(crypto, keyData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(keyData.length !== 16 && keyData.length !== 32)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Miscreant: invalid key length: \".concat(keyData.length, \" (expected 16 or 32 bytes)\"));\n\n              case 2:\n                _context2.next = 4;\n                return crypto.subtle.importKey(\"raw\", keyData, \"AES-CTR\", false, [\"encrypt\"]);\n\n              case 4:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new WebCryptoAesCtr(key, crypto));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return WebCryptoAesCtr;\n}();\n\nexports.default = WebCryptoAesCtr;","map":null,"metadata":{},"sourceType":"script"}