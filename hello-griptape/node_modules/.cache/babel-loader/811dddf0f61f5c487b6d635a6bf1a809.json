{"ast":null,"code":"\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar aead_1 = require(\"./aead\");\n\nvar webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\n\n\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\n\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\n\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ℰ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nvar StreamEncryptor = /*#__PURE__*/function () {\n  _createClass(StreamEncryptor, null, [{\n    key: \"importKey\",\n\n    /** Create a new StreamEncryptor instance with the given key */\n    value: function importKey(keyData, nonce, alg) {\n      var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = StreamEncryptor;\n                _context.next = 3;\n                return aead_1.AEAD.importKey(keyData, alg, provider);\n\n              case 3:\n                _context.t1 = _context.sent;\n                _context.t2 = nonce;\n                return _context.abrupt(\"return\", new _context.t0(_context.t1, _context.t2));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }]);\n\n  function StreamEncryptor(aead, nonce) {\n    _classCallCheck(this, StreamEncryptor);\n\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Encrypt and authenticate data using the selected AEAD algorithm */\n\n\n  _createClass(StreamEncryptor, [{\n    key: \"seal\",\n    value: function seal(plaintext) {\n      var lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._aead.clear();\n\n      return this;\n    }\n  }]);\n\n  return StreamEncryptor;\n}();\n\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the 𝒟 stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nvar StreamDecryptor = /*#__PURE__*/function () {\n  _createClass(StreamDecryptor, null, [{\n    key: \"importKey\",\n\n    /** Create a new StreamDecryptor instance with the given key */\n    value: function importKey(keyData, nonce, alg) {\n      var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = StreamDecryptor;\n                _context3.next = 3;\n                return aead_1.AEAD.importKey(keyData, alg, provider);\n\n              case 3:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = nonce;\n                return _context3.abrupt(\"return\", new _context3.t0(_context3.t1, _context3.t2));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }]);\n\n  function StreamDecryptor(aead, nonce) {\n    _classCallCheck(this, StreamDecryptor);\n\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Decrypt and authenticate data using the selected AEAD algorithm */\n\n\n  _createClass(StreamDecryptor, [{\n    key: \"open\",\n    value: function open(ciphertext) {\n      var lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._aead.clear();\n\n      return this;\n    }\n  }]);\n\n  return StreamDecryptor;\n}();\n\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\n\nvar NonceEncoder = /*#__PURE__*/function () {\n  function NonceEncoder(noncePrefix) {\n    _classCallCheck(this, NonceEncoder);\n\n    if (noncePrefix.length !== exports.NONCE_SIZE) {\n      throw new Error(\"STREAM: nonce must be 8-bits (got \".concat(noncePrefix.length));\n    }\n\n    this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n    this.view = new DataView(this.buffer);\n    this.array = new Uint8Array(this.buffer);\n    this.array.set(noncePrefix);\n    this.counter = 0;\n    this.finished = false;\n  }\n  /** Compute the next nonce value, incrementing the internal counter */\n\n\n  _createClass(NonceEncoder, [{\n    key: \"next\",\n    value: function next(lastBlock) {\n      if (this.finished) {\n        throw new Error(\"STREAM: already finished\");\n      }\n\n      this.view.setInt32(8, this.counter, false);\n\n      if (lastBlock) {\n        this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n        this.finished = true;\n      } else {\n        this.counter += 1;\n\n        if (this.counter > exports.COUNTER_MAX) {\n          throw new Error(\"STREAM counter overflowed\");\n        }\n      }\n\n      return this.array;\n    }\n  }]);\n\n  return NonceEncoder;\n}();","map":null,"metadata":{},"sourceType":"script"}