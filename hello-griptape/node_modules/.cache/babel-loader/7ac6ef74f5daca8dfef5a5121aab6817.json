{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Propietario\\\\griptape-tutorials\\\\hello-griptape\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"@iov/crypto\");\n\nvar signature_1 = require(\"./signature\");\n\nfunction prehash(bytes, type) {\n  switch (type) {\n    case null:\n      return new Uint8Array(_toConsumableArray(bytes));\n\n    case \"sha256\":\n      return new crypto_1.Sha256(bytes).digest();\n\n    case \"sha512\":\n      return new crypto_1.Sha512(bytes).digest();\n\n    default:\n      throw new Error(\"Unknown prehash type\");\n  }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\n\n\nfunction makeSecretNetworkPath(a) {\n  return [crypto_1.Slip10RawIndex.hardened(44), crypto_1.Slip10RawIndex.hardened(529), crypto_1.Slip10RawIndex.hardened(0), crypto_1.Slip10RawIndex.normal(0), crypto_1.Slip10RawIndex.normal(a)];\n}\n\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\n\nvar Secp256k1Pen = /*#__PURE__*/function () {\n  function Secp256k1Pen(privkey, pubkey) {\n    _classCallCheck(this, Secp256k1Pen);\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  _createClass(Secp256k1Pen, [{\n    key: \"sign\",\n\n    /**\n     * Creates and returns a signature\n     */\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signBytes) {\n        var prehashType,\n            message,\n            signature,\n            fixedLengthSignature,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                prehashType = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"sha256\";\n                message = prehash(signBytes, prehashType);\n                _context.next = 4;\n                return crypto_1.Secp256k1.createSignature(message, this.privkey);\n\n              case 4:\n                signature = _context.sent;\n                fixedLengthSignature = new Uint8Array([].concat(_toConsumableArray(signature.r(32)), _toConsumableArray(signature.s(32))));\n                return _context.abrupt(\"return\", signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sign(_x) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }], [{\n    key: \"fromMnemonic\",\n    value: function () {\n      var _fromMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mnemonic) {\n        var hdPath,\n            seed,\n            _crypto_1$Slip10$deri,\n            privkey,\n            uncompressed,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                hdPath = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : makeSecretNetworkPath(0);\n                _context2.next = 3;\n                return crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n\n              case 3:\n                seed = _context2.sent;\n                _crypto_1$Slip10$deri = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath), privkey = _crypto_1$Slip10$deri.privkey;\n                _context2.next = 7;\n                return crypto_1.Secp256k1.makeKeypair(privkey);\n\n              case 7:\n                uncompressed = _context2.sent.pubkey;\n                return _context2.abrupt(\"return\", new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed)));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromMnemonic(_x2) {\n        return _fromMnemonic.apply(this, arguments);\n      }\n\n      return fromMnemonic;\n    }()\n  }]);\n\n  return Secp256k1Pen;\n}();\n\nexports.Secp256k1Pen = Secp256k1Pen;","map":null,"metadata":{},"sourceType":"script"}