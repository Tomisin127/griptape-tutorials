import { BaseContract } from '@stakeordie/griptape.js';
import { ComputedRef } from 'vue';
export declare type State<T> = ComputedRef<T>;
export declare type StateQuery<R> = () => Promise<R>;
export declare type StateDefiner = <R>(name: string, query: StateQuery<R>) => void;
export interface StoreDefiner<C extends BaseContract> {
    defineState: StateDefiner;
    contract: C;
}
export declare type StoreMessages = Record<string, () => Promise<unknown>>;
export declare type StatesDefiner<C extends BaseContract> = (defineState: StoreDefiner<C>) => StoreMessages | void;
export interface Store {
    loading: State<boolean>;
}
export declare function toQueryName(name: string): string;
export declare function createContractStore<C extends BaseContract, S>(contract: C, defineStates: StatesDefiner<C>): () => S;
