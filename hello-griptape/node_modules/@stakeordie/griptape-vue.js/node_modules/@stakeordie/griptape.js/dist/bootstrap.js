"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSigningClient = exports.getContracts = exports.instantiate = exports.getHeight = exports.getChainId = exports.getKeplrAccountProvider = exports.executeContract = exports.queryContract = exports.bootstrap = exports.gripApp = exports.isAccountAvailable = exports.getAddress = exports.getConfig = exports.keplrViewingKeyManager = exports.viewingKeyManager = void 0;
var wallet_1 = require("./wallet");
var secretjs_1 = require("secretjs");
var viewing_keys_1 = require("./viewing-keys");
var events_1 = require("./events");
var customFees = {
    upload: {
        amount: [{ amount: '2000000', denom: 'uscrt' }],
        gas: '2000000',
    },
    init: {
        amount: [{ amount: '500000', denom: 'uscrt' }],
        gas: '500000',
    },
    exec: {
        amount: [{ amount: '750000', denom: 'uscrt' }],
        gas: '750000',
    },
    send: {
        amount: [{ amount: '80000', denom: 'uscrt' }],
        gas: '80000',
    },
};
var config;
var client;
var signingClient;
var provider;
var getProvider;
var accountAvailable = false;
exports.viewingKeyManager = new viewing_keys_1.ViewingKeyManager();
exports.keplrViewingKeyManager = new viewing_keys_1.KeplrViewingKeyManager(exports.viewingKeyManager);
function getConfig() {
    return config;
}
exports.getConfig = getConfig;
function getAddress() {
    return provider === null || provider === void 0 ? void 0 : provider.getAddress();
}
exports.getAddress = getAddress;
function isAccountAvailable() {
    return accountAvailable;
}
exports.isAccountAvailable = isAccountAvailable;
function gripApp(restUrl, accountProviderGetter, runApp) {
    return __awaiter(this, void 0, void 0, function () {
        var chainId, connected;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!config) return [3, 5];
                    config = { restUrl: restUrl };
                    return [4, initClient()];
                case 1:
                    _a.sent();
                    runApp();
                    return [4, getChainId()];
                case 2:
                    chainId = _a.sent();
                    getProvider = accountProviderGetter;
                    connected = localStorage.getItem('connected');
                    if (connected == null) {
                        events_1.emitEvent('account-not-available');
                        throw new Error('Not connected yet');
                    }
                    return [4, getProvider(chainId)];
                case 3:
                    provider = _a.sent();
                    events_1.emitEvent('account-available');
                    accountAvailable = true;
                    return [4, initSigningClient()];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [2];
            }
        });
    });
}
exports.gripApp = gripApp;
function initClient() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (client)
                return [2];
            if (!config)
                throw new Error('No configuration was set');
            client = new secretjs_1.CosmWasmClient(config.restUrl);
            return [2];
        });
    });
}
function initSigningClient() {
    return __awaiter(this, void 0, void 0, function () {
        var restUrl, address, signer, seed;
        return __generator(this, function (_a) {
            if (signingClient)
                return [2];
            if (!config)
                throw new Error('No configuration was set');
            if (!client)
                throw new Error('No client available');
            if (!provider)
                throw new Error('No provider available');
            restUrl = config.restUrl;
            if (!provider)
                return [2];
            address = provider.getAddress();
            signer = provider.getSigner();
            seed = provider.getSeed();
            signingClient = new secretjs_1.SigningCosmWasmClient(restUrl, address, signer, seed, customFees);
            return [2];
        });
    });
}
function bootstrap() {
    return __awaiter(this, void 0, void 0, function () {
        var chainId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!getProvider)
                        throw new Error('No provider available');
                    return [4, initClient()];
                case 1:
                    _a.sent();
                    return [4, getChainId()];
                case 2:
                    chainId = _a.sent();
                    return [4, getProvider(chainId)];
                case 3:
                    provider = _a.sent();
                    events_1.emitEvent('account-available');
                    accountAvailable = true;
                    return [4, initSigningClient()];
                case 4:
                    _a.sent();
                    localStorage.setItem('connected', 'connected');
                    return [2];
            }
        });
    });
}
exports.bootstrap = bootstrap;
function queryContract(address, queryMsg) {
    if (!client)
        throw new Error('No client available');
    return client.queryContractSmart(address, queryMsg);
}
exports.queryContract = queryContract;
function executeContract(contractAddress, handleMsg, memo, transferAmount, fee) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!signingClient)
                throw new Error('No signing client available');
            return [2, signingClient.execute(contractAddress, handleMsg, memo, transferAmount, fee)];
        });
    });
}
exports.executeContract = executeContract;
function getKeplrAccountProvider() {
    var _this = this;
    return function (chainId) { return __awaiter(_this, void 0, void 0, function () {
        var keplr, e_1, offlineSigner, address, enigmaUtils;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, wallet_1.getKeplr()];
                case 1:
                    keplr = _a.sent();
                    if (!keplr || !window.getOfflineSigner)
                        throw new Error('Install keplr extension');
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4, keplr.enable(chainId)];
                case 3:
                    _a.sent();
                    return [3, 5];
                case 4:
                    e_1 = _a.sent();
                    return [2];
                case 5:
                    offlineSigner = window.getOfflineSigner(chainId);
                    return [4, offlineSigner.getAccounts()];
                case 6:
                    address = (_a.sent())[0].address;
                    enigmaUtils = keplr.getEnigmaUtils(chainId);
                    window.addEventListener('keplr_keystorechange', function () {
                        events_1.emitEvent('account-change');
                    });
                    return [2, {
                            getAddress: function () { return address; },
                            getSigner: function () { return offlineSigner; },
                            getSeed: function () { return enigmaUtils; },
                        }];
            }
        });
    }); };
}
exports.getKeplrAccountProvider = getKeplrAccountProvider;
function getChainId() {
    if (!client)
        throw new Error('No client available');
    return client.getChainId();
}
exports.getChainId = getChainId;
function getHeight() {
    if (!client)
        throw new Error('No client available');
    return client.getHeight();
}
exports.getHeight = getHeight;
function instantiate(codeId, initMsg, label) {
    if (!signingClient)
        throw new Error('No signing client available');
    return signingClient.instantiate(codeId, initMsg, label);
}
exports.instantiate = instantiate;
function getContracts(codeId) {
    if (!client)
        throw new Error('No client available');
    return client === null || client === void 0 ? void 0 : client.getContracts(codeId);
}
exports.getContracts = getContracts;
function getSigningClient() {
    if (!signingClient)
        throw new Error('No singing client available');
    return signingClient;
}
exports.getSigningClient = getSigningClient;
//# sourceMappingURL=bootstrap.js.map