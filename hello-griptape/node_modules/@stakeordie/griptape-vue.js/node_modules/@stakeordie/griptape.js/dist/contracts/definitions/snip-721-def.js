"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.snip721Def = void 0;
exports.snip721Def = {
    queries: {
        getContractInfo: function () {
            return { contract_info: {} };
        },
        getNumTokens: function (_a) {
            var address = _a.address, viewing_key = _a.key;
            var viewer = { address: address, viewing_key: viewing_key };
            return { num_tokens: { viewer: viewer } };
        },
        getOwnerOf: function (_a, token_id, include_expired) {
            var address = _a.address, viewing_key = _a.key;
            var viewer = { address: address, viewing_key: viewing_key };
            return { owner_of: { token_id: token_id, viewer: viewer, include_expired: include_expired } };
        },
        getNftInfo: function (_, token_id) {
            return { nft_info: { token_id: token_id } };
        },
        getAllNftInfo: function (_a, token_id, include_expired) {
            var address = _a.address, viewing_key = _a.key;
            var viewer = { address: address, viewing_key: viewing_key };
            return { all_nft_info: { token_id: token_id, viewer: viewer, include_expired: include_expired } };
        },
        getPrivateMetadata: function (_a, token_id) {
            var address = _a.address, viewing_key = _a.key;
            var viewer = { viewing_key: viewing_key, address: address };
            return {
                private_metadata: {
                    token_id: token_id,
                    viewer: viewer,
                },
            };
        },
        getNftDossier: function (_a, token_id, include_expired) {
            var address = _a.address, viewing_key = _a.key;
            var viewer = { viewing_key: viewing_key, address: address };
            return {
                nft_dossier: {
                    token_id: token_id,
                    viewer: viewer,
                    include_expired: include_expired,
                },
            };
        },
        getTokenApprovals: function (_a, token_id, include_expired) {
            var viewing_key = _a.key;
            return {
                token_approvals: {
                    token_id: token_id,
                    viewing_key: viewing_key,
                    include_expired: include_expired,
                },
            };
        },
        getApprovedForAll: function (_a, include_expired) {
            var owner = _a.address;
            return {
                approved_for_all: {
                    owner: owner,
                    include_expired: include_expired,
                },
            };
        },
        getInventoryApprovals: function (_a, include_expired) {
            var address = _a.address, viewing_key = _a.key;
            return {
                inventory_approvals: {
                    address: address,
                    viewing_key: viewing_key,
                    include_expired: include_expired,
                },
            };
        },
        getTokens: function (_a, owner, start_after, limit) {
            var viewer = _a.address;
            return {
                tokens: {
                    viewer: viewer,
                    owner: owner,
                    start_after: start_after,
                    limit: limit,
                },
            };
        },
        getTransactionHistory: function (_a, page, page_size) {
            var address = _a.address, viewing_key = _a.key;
            return {
                transaction_history: {
                    address: address,
                    viewing_key: viewing_key,
                    page: page,
                    page_size: page_size,
                },
            };
        },
    },
    messages: {
        transfer: function (_a, recipient, token_id, memo) {
            var padding = _a.padding;
            var handleMsg = {
                transfer_nft: { recipient: recipient, token_id: token_id, memo: memo, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        send: function (_a, contract, token_id, msg, memo) {
            var padding = _a.padding;
            var handleMsg = {
                send_nft: { contract: contract, token_id: token_id, msg: msg, memo: memo, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        approve: function (_a, spender, token_id, expires) {
            var padding = _a.padding;
            var handleMsg = {
                approve: { spender: spender, token_id: token_id, expires: expires, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        approveAll: function (_a, operator, expires) {
            var padding = _a.padding;
            var handleMsg = {
                approve_all: { operator: operator, expires: expires, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        revoke: function (_a, spender, token_id) {
            var padding = _a.padding;
            var handleMsg = {
                revoke: { spender: spender, token_id: token_id, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        revokeAll: function (_a, operator) {
            var padding = _a.padding;
            var handleMsg = {
                revoke_all: { operator: operator, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        setWhiteListedApproval: function (_a, address, token_id, view_owner, view_private_metadata, transfer, expires) {
            var padding = _a.padding;
            var handleMsg = {
                set_whitelisted_approval: {
                    address: address,
                    token_id: token_id,
                    view_owner: view_owner,
                    view_private_metadata: view_private_metadata,
                    transfer: transfer,
                    expires: expires,
                    padding: padding,
                },
            };
            return { handleMsg: handleMsg };
        },
        registerReceive: function (_a, code_hash, also_implements_batch_receive_nft) {
            var padding = _a.padding;
            var handleMsg = {
                register_receive_nft: {
                    code_hash: code_hash,
                    also_implements_batch_receive_nft: also_implements_batch_receive_nft,
                    padding: padding,
                },
            };
            return { handleMsg: handleMsg };
        },
        createViewingKey: function (_a) {
            var padding = _a.padding, entropy = _a.entropy;
            var handleMsg = {
                create_viewing_key: { entropy: entropy, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
        setViewingKey: function (_a, key) {
            var padding = _a.padding;
            var handleMsg = {
                set_viewing_key: { key: key, padding: padding },
            };
            return { handleMsg: handleMsg };
        },
    },
};
//# sourceMappingURL=snip-721-def.js.map