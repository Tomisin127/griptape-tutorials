import { ExecuteResult } from 'secretjs';
import { ContractDefinition, ContractSpecification, ContractMessageResponse, ContractInstantiationRequest, MessageGetter, MultiMessageInfo, BaseContract } from './types';
export declare class ContractTxResponseHandler<T> implements ContractMessageResponse<T> {
    private readonly response;
    private constructor();
    parse(): any;
    getRaw(): ExecuteResult;
    isEmpty(): boolean;
    static of<T>(response: ExecuteResult): ContractMessageResponse<T>;
}
export declare function createContract<T>(contract: ContractSpecification): T;
export declare function extendContract(base: ContractDefinition, extended: ContractDefinition): ContractDefinition;
export declare function refContract<T>(idOrAddress: string): T;
export declare function instantiateContract<T>(req: ContractInstantiationRequest): Promise<T>;
export declare function multiMessage<R>(infos: MultiMessageInfo[], memo?: string): Promise<ContractMessageResponse<R>>;
export declare function message(contract: BaseContract, message: MessageGetter, ...args: unknown[]): MultiMessageInfo;
